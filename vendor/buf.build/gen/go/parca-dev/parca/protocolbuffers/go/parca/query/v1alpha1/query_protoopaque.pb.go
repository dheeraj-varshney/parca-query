// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: parca/query/v1alpha1/query.proto

//go:build protoopaque

package queryv1alpha1

import (
	v1alpha11 "buf.build/gen/go/parca-dev/parca/protocolbuffers/go/parca/metastore/v1alpha1"
	v1alpha1 "buf.build/gen/go/parca-dev/parca/protocolbuffers/go/parca/profilestore/v1alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Mode specifies the type of diff
type ProfileDiffSelection_Mode int32

const (
	// MODE_SINGLE_UNSPECIFIED default unspecified
	ProfileDiffSelection_MODE_SINGLE_UNSPECIFIED ProfileDiffSelection_Mode = 0
	// MODE_MERGE merge profile
	ProfileDiffSelection_MODE_MERGE ProfileDiffSelection_Mode = 1
)

// Enum value maps for ProfileDiffSelection_Mode.
var (
	ProfileDiffSelection_Mode_name = map[int32]string{
		0: "MODE_SINGLE_UNSPECIFIED",
		1: "MODE_MERGE",
	}
	ProfileDiffSelection_Mode_value = map[string]int32{
		"MODE_SINGLE_UNSPECIFIED": 0,
		"MODE_MERGE":              1,
	}
)

func (x ProfileDiffSelection_Mode) Enum() *ProfileDiffSelection_Mode {
	p := new(ProfileDiffSelection_Mode)
	*p = x
	return p
}

func (x ProfileDiffSelection_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProfileDiffSelection_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_parca_query_v1alpha1_query_proto_enumTypes[0].Descriptor()
}

func (ProfileDiffSelection_Mode) Type() protoreflect.EnumType {
	return &file_parca_query_v1alpha1_query_proto_enumTypes[0]
}

func (x ProfileDiffSelection_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Mode is the type of query request
type QueryRequest_Mode int32

const (
	// MODE_SINGLE_UNSPECIFIED query unspecified
	QueryRequest_MODE_SINGLE_UNSPECIFIED QueryRequest_Mode = 0
	// MODE_DIFF is a diff query
	QueryRequest_MODE_DIFF QueryRequest_Mode = 1
	// MODE_MERGE is a merge query
	QueryRequest_MODE_MERGE QueryRequest_Mode = 2
)

// Enum value maps for QueryRequest_Mode.
var (
	QueryRequest_Mode_name = map[int32]string{
		0: "MODE_SINGLE_UNSPECIFIED",
		1: "MODE_DIFF",
		2: "MODE_MERGE",
	}
	QueryRequest_Mode_value = map[string]int32{
		"MODE_SINGLE_UNSPECIFIED": 0,
		"MODE_DIFF":               1,
		"MODE_MERGE":              2,
	}
)

func (x QueryRequest_Mode) Enum() *QueryRequest_Mode {
	p := new(QueryRequest_Mode)
	*p = x
	return p
}

func (x QueryRequest_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryRequest_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_parca_query_v1alpha1_query_proto_enumTypes[1].Descriptor()
}

func (QueryRequest_Mode) Type() protoreflect.EnumType {
	return &file_parca_query_v1alpha1_query_proto_enumTypes[1]
}

func (x QueryRequest_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// ReportType is the type of report to return
type QueryRequest_ReportType int32

const (
	// REPORT_TYPE_FLAMEGRAPH_UNSPECIFIED unspecified
	//
	// Deprecated: Marked as deprecated in parca/query/v1alpha1/query.proto.
	QueryRequest_REPORT_TYPE_FLAMEGRAPH_UNSPECIFIED QueryRequest_ReportType = 0
	// REPORT_TYPE_PPROF unspecified
	QueryRequest_REPORT_TYPE_PPROF QueryRequest_ReportType = 1
	// REPORT_TYPE_TOP unspecified
	QueryRequest_REPORT_TYPE_TOP QueryRequest_ReportType = 2
	// REPORT_TYPE_CALLGRAPH unspecified
	QueryRequest_REPORT_TYPE_CALLGRAPH QueryRequest_ReportType = 3
	// REPORT_TYPE_FLAMEGRAPH_TABLE unspecified
	QueryRequest_REPORT_TYPE_FLAMEGRAPH_TABLE QueryRequest_ReportType = 4
	// REPORT_TYPE_FLAMEGRAPH_ARROW unspecified
	QueryRequest_REPORT_TYPE_FLAMEGRAPH_ARROW QueryRequest_ReportType = 5
	// REPORT_TYPE_SOURCE contains source code annotated with profiling information
	QueryRequest_REPORT_TYPE_SOURCE QueryRequest_ReportType = 6
	// REPORT_TYPE_TABLE_ARROW unspecified
	QueryRequest_REPORT_TYPE_TABLE_ARROW QueryRequest_ReportType = 7
	// REPORT_TYPE_PROFILE_METADATA contains metadata about the profile i.e. binaries, labels
	QueryRequest_REPORT_TYPE_PROFILE_METADATA QueryRequest_ReportType = 8
	// REPORT_TYPE_FLAMECHART contains flamechart representation of the report
	QueryRequest_REPORT_TYPE_FLAMECHART QueryRequest_ReportType = 9
)

// Enum value maps for QueryRequest_ReportType.
var (
	QueryRequest_ReportType_name = map[int32]string{
		0: "REPORT_TYPE_FLAMEGRAPH_UNSPECIFIED",
		1: "REPORT_TYPE_PPROF",
		2: "REPORT_TYPE_TOP",
		3: "REPORT_TYPE_CALLGRAPH",
		4: "REPORT_TYPE_FLAMEGRAPH_TABLE",
		5: "REPORT_TYPE_FLAMEGRAPH_ARROW",
		6: "REPORT_TYPE_SOURCE",
		7: "REPORT_TYPE_TABLE_ARROW",
		8: "REPORT_TYPE_PROFILE_METADATA",
		9: "REPORT_TYPE_FLAMECHART",
	}
	QueryRequest_ReportType_value = map[string]int32{
		"REPORT_TYPE_FLAMEGRAPH_UNSPECIFIED": 0,
		"REPORT_TYPE_PPROF":                  1,
		"REPORT_TYPE_TOP":                    2,
		"REPORT_TYPE_CALLGRAPH":              3,
		"REPORT_TYPE_FLAMEGRAPH_TABLE":       4,
		"REPORT_TYPE_FLAMEGRAPH_ARROW":       5,
		"REPORT_TYPE_SOURCE":                 6,
		"REPORT_TYPE_TABLE_ARROW":            7,
		"REPORT_TYPE_PROFILE_METADATA":       8,
		"REPORT_TYPE_FLAMECHART":             9,
	}
)

func (x QueryRequest_ReportType) Enum() *QueryRequest_ReportType {
	p := new(QueryRequest_ReportType)
	*p = x
	return p
}

func (x QueryRequest_ReportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryRequest_ReportType) Descriptor() protoreflect.EnumDescriptor {
	return file_parca_query_v1alpha1_query_proto_enumTypes[2].Descriptor()
}

func (QueryRequest_ReportType) Type() protoreflect.EnumType {
	return &file_parca_query_v1alpha1_query_proto_enumTypes[2]
}

func (x QueryRequest_ReportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// ProfileTypesRequest is the request to retrieve the list of available profile types.
type ProfileTypesRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProfileTypesRequest) Reset() {
	*x = ProfileTypesRequest{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileTypesRequest) ProtoMessage() {}

func (x *ProfileTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ProfileTypesRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ProfileTypesRequest_builder) Build() *ProfileTypesRequest {
	m0 := &ProfileTypesRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// ProfileTypesResponse is the response to retrieve the list of available profile types.
type ProfileTypesResponse struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Types *[]*ProfileType        `protobuf:"bytes,1,rep,name=types,proto3"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ProfileTypesResponse) Reset() {
	*x = ProfileTypesResponse{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileTypesResponse) ProtoMessage() {}

func (x *ProfileTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProfileTypesResponse) GetTypes() []*ProfileType {
	if x != nil {
		if x.xxx_hidden_Types != nil {
			return *x.xxx_hidden_Types
		}
	}
	return nil
}

func (x *ProfileTypesResponse) SetTypes(v []*ProfileType) {
	x.xxx_hidden_Types = &v
}

type ProfileTypesResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// types is the list of available profile types.
	Types []*ProfileType
}

func (b0 ProfileTypesResponse_builder) Build() *ProfileTypesResponse {
	m0 := &ProfileTypesResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Types = &b.Types
	return m0
}

// ProfileType is the type of a profile as well as the units the profile type is available in.
type ProfileType struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Name       string                 `protobuf:"bytes,1,opt,name=name,proto3"`
	xxx_hidden_SampleType string                 `protobuf:"bytes,2,opt,name=sample_type,json=sampleType,proto3"`
	xxx_hidden_SampleUnit string                 `protobuf:"bytes,3,opt,name=sample_unit,json=sampleUnit,proto3"`
	xxx_hidden_PeriodType string                 `protobuf:"bytes,4,opt,name=period_type,json=periodType,proto3"`
	xxx_hidden_PeriodUnit string                 `protobuf:"bytes,5,opt,name=period_unit,json=periodUnit,proto3"`
	xxx_hidden_Delta      bool                   `protobuf:"varint,6,opt,name=delta,proto3"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ProfileType) Reset() {
	*x = ProfileType{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileType) ProtoMessage() {}

func (x *ProfileType) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProfileType) GetName() string {
	if x != nil {
		return x.xxx_hidden_Name
	}
	return ""
}

func (x *ProfileType) GetSampleType() string {
	if x != nil {
		return x.xxx_hidden_SampleType
	}
	return ""
}

func (x *ProfileType) GetSampleUnit() string {
	if x != nil {
		return x.xxx_hidden_SampleUnit
	}
	return ""
}

func (x *ProfileType) GetPeriodType() string {
	if x != nil {
		return x.xxx_hidden_PeriodType
	}
	return ""
}

func (x *ProfileType) GetPeriodUnit() string {
	if x != nil {
		return x.xxx_hidden_PeriodUnit
	}
	return ""
}

func (x *ProfileType) GetDelta() bool {
	if x != nil {
		return x.xxx_hidden_Delta
	}
	return false
}

func (x *ProfileType) SetName(v string) {
	x.xxx_hidden_Name = v
}

func (x *ProfileType) SetSampleType(v string) {
	x.xxx_hidden_SampleType = v
}

func (x *ProfileType) SetSampleUnit(v string) {
	x.xxx_hidden_SampleUnit = v
}

func (x *ProfileType) SetPeriodType(v string) {
	x.xxx_hidden_PeriodType = v
}

func (x *ProfileType) SetPeriodUnit(v string) {
	x.xxx_hidden_PeriodUnit = v
}

func (x *ProfileType) SetDelta(v bool) {
	x.xxx_hidden_Delta = v
}

type ProfileType_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// name is the name of the profile type.
	Name string
	// sample_type is the type of the samples in the profile.
	SampleType string
	// sample_unit is the unit of the samples in the profile.
	SampleUnit string
	// period_type is the type of the periods in the profile.
	PeriodType string
	// period_unit is the unit of the periods in the profile.
	PeriodUnit string
	// delta describes whether the profile is a delta profile.
	Delta bool
}

func (b0 ProfileType_builder) Build() *ProfileType {
	m0 := &ProfileType{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Name = b.Name
	x.xxx_hidden_SampleType = b.SampleType
	x.xxx_hidden_SampleUnit = b.SampleUnit
	x.xxx_hidden_PeriodType = b.PeriodType
	x.xxx_hidden_PeriodUnit = b.PeriodUnit
	x.xxx_hidden_Delta = b.Delta
	return m0
}

// QueryRangeRequest is the request for a set of profiles matching a query over a time window
type QueryRangeRequest struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Query string                 `protobuf:"bytes,1,opt,name=query,proto3"`
	xxx_hidden_Start *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start,proto3"`
	xxx_hidden_End   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end,proto3"`
	xxx_hidden_Limit uint32                 `protobuf:"varint,4,opt,name=limit,proto3"`
	xxx_hidden_Step  *durationpb.Duration   `protobuf:"bytes,5,opt,name=step,proto3"`
	xxx_hidden_SumBy []string               `protobuf:"bytes,6,rep,name=sum_by,json=sumBy,proto3"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *QueryRangeRequest) Reset() {
	*x = QueryRangeRequest{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRangeRequest) ProtoMessage() {}

func (x *QueryRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *QueryRangeRequest) GetQuery() string {
	if x != nil {
		return x.xxx_hidden_Query
	}
	return ""
}

func (x *QueryRangeRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Start
	}
	return nil
}

func (x *QueryRangeRequest) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_End
	}
	return nil
}

func (x *QueryRangeRequest) GetLimit() uint32 {
	if x != nil {
		return x.xxx_hidden_Limit
	}
	return 0
}

func (x *QueryRangeRequest) GetStep() *durationpb.Duration {
	if x != nil {
		return x.xxx_hidden_Step
	}
	return nil
}

func (x *QueryRangeRequest) GetSumBy() []string {
	if x != nil {
		return x.xxx_hidden_SumBy
	}
	return nil
}

func (x *QueryRangeRequest) SetQuery(v string) {
	x.xxx_hidden_Query = v
}

func (x *QueryRangeRequest) SetStart(v *timestamppb.Timestamp) {
	x.xxx_hidden_Start = v
}

func (x *QueryRangeRequest) SetEnd(v *timestamppb.Timestamp) {
	x.xxx_hidden_End = v
}

func (x *QueryRangeRequest) SetLimit(v uint32) {
	x.xxx_hidden_Limit = v
}

func (x *QueryRangeRequest) SetStep(v *durationpb.Duration) {
	x.xxx_hidden_Step = v
}

func (x *QueryRangeRequest) SetSumBy(v []string) {
	x.xxx_hidden_SumBy = v
}

func (x *QueryRangeRequest) HasStart() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Start != nil
}

func (x *QueryRangeRequest) HasEnd() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_End != nil
}

func (x *QueryRangeRequest) HasStep() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Step != nil
}

func (x *QueryRangeRequest) ClearStart() {
	x.xxx_hidden_Start = nil
}

func (x *QueryRangeRequest) ClearEnd() {
	x.xxx_hidden_End = nil
}

func (x *QueryRangeRequest) ClearStep() {
	x.xxx_hidden_Step = nil
}

type QueryRangeRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// query is the query string to match profiles against
	Query string
	// start is the start of the query time window
	Start *timestamppb.Timestamp
	// end is the end of the query time window
	End *timestamppb.Timestamp
	// limit is the max number of profiles to include in the response
	Limit uint32
	// step is the duration of each sample returned.
	Step *durationpb.Duration
	// sum_by is the set of labels to sum by
	SumBy []string
}

func (b0 QueryRangeRequest_builder) Build() *QueryRangeRequest {
	m0 := &QueryRangeRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Query = b.Query
	x.xxx_hidden_Start = b.Start
	x.xxx_hidden_End = b.End
	x.xxx_hidden_Limit = b.Limit
	x.xxx_hidden_Step = b.Step
	x.xxx_hidden_SumBy = b.SumBy
	return m0
}

// QueryRangeResponse is the set of matching profile values
type QueryRangeResponse struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Series *[]*MetricsSeries      `protobuf:"bytes,1,rep,name=series,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *QueryRangeResponse) Reset() {
	*x = QueryRangeResponse{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRangeResponse) ProtoMessage() {}

func (x *QueryRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *QueryRangeResponse) GetSeries() []*MetricsSeries {
	if x != nil {
		if x.xxx_hidden_Series != nil {
			return *x.xxx_hidden_Series
		}
	}
	return nil
}

func (x *QueryRangeResponse) SetSeries(v []*MetricsSeries) {
	x.xxx_hidden_Series = &v
}

type QueryRangeResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// series is the set of metrics series that satisfy the query range request
	Series []*MetricsSeries
}

func (b0 QueryRangeResponse_builder) Build() *QueryRangeResponse {
	m0 := &QueryRangeResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Series = &b.Series
	return m0
}

// MetricsSeries is a set of labels and corresponding sample values
type MetricsSeries struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Labelset   *v1alpha1.LabelSet     `protobuf:"bytes,1,opt,name=labelset,proto3"`
	xxx_hidden_Samples    *[]*MetricsSample      `protobuf:"bytes,2,rep,name=samples,proto3"`
	xxx_hidden_PeriodType *ValueType             `protobuf:"bytes,3,opt,name=period_type,json=periodType,proto3"`
	xxx_hidden_SampleType *ValueType             `protobuf:"bytes,4,opt,name=sample_type,json=sampleType,proto3"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *MetricsSeries) Reset() {
	*x = MetricsSeries{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricsSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsSeries) ProtoMessage() {}

func (x *MetricsSeries) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MetricsSeries) GetLabelset() *v1alpha1.LabelSet {
	if x != nil {
		return x.xxx_hidden_Labelset
	}
	return nil
}

func (x *MetricsSeries) GetSamples() []*MetricsSample {
	if x != nil {
		if x.xxx_hidden_Samples != nil {
			return *x.xxx_hidden_Samples
		}
	}
	return nil
}

func (x *MetricsSeries) GetPeriodType() *ValueType {
	if x != nil {
		return x.xxx_hidden_PeriodType
	}
	return nil
}

func (x *MetricsSeries) GetSampleType() *ValueType {
	if x != nil {
		return x.xxx_hidden_SampleType
	}
	return nil
}

func (x *MetricsSeries) SetLabelset(v *v1alpha1.LabelSet) {
	x.xxx_hidden_Labelset = v
}

func (x *MetricsSeries) SetSamples(v []*MetricsSample) {
	x.xxx_hidden_Samples = &v
}

func (x *MetricsSeries) SetPeriodType(v *ValueType) {
	x.xxx_hidden_PeriodType = v
}

func (x *MetricsSeries) SetSampleType(v *ValueType) {
	x.xxx_hidden_SampleType = v
}

func (x *MetricsSeries) HasLabelset() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Labelset != nil
}

func (x *MetricsSeries) HasPeriodType() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_PeriodType != nil
}

func (x *MetricsSeries) HasSampleType() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SampleType != nil
}

func (x *MetricsSeries) ClearLabelset() {
	x.xxx_hidden_Labelset = nil
}

func (x *MetricsSeries) ClearPeriodType() {
	x.xxx_hidden_PeriodType = nil
}

func (x *MetricsSeries) ClearSampleType() {
	x.xxx_hidden_SampleType = nil
}

type MetricsSeries_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// labelset is the set of key value pairs
	Labelset *v1alpha1.LabelSet
	// samples is the set of top-level cumulative values of the corresponding profiles
	Samples []*MetricsSample
	// period_type is the value type of profile period
	PeriodType *ValueType
	// sample_type is the value type of profile sample
	SampleType *ValueType
}

func (b0 MetricsSeries_builder) Build() *MetricsSeries {
	m0 := &MetricsSeries{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Labelset = b.Labelset
	x.xxx_hidden_Samples = &b.Samples
	x.xxx_hidden_PeriodType = b.PeriodType
	x.xxx_hidden_SampleType = b.SampleType
	return m0
}

// MetricsSample is a cumulative value and timestamp of a profile
type MetricsSample struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Timestamp      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3"`
	xxx_hidden_Value          int64                  `protobuf:"varint,2,opt,name=value,proto3"`
	xxx_hidden_ValuePerSecond float64                `protobuf:"fixed64,3,opt,name=value_per_second,json=valuePerSecond,proto3"`
	xxx_hidden_Duration       int64                  `protobuf:"varint,4,opt,name=duration,proto3"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *MetricsSample) Reset() {
	*x = MetricsSample{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricsSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsSample) ProtoMessage() {}

func (x *MetricsSample) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MetricsSample) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Timestamp
	}
	return nil
}

func (x *MetricsSample) GetValue() int64 {
	if x != nil {
		return x.xxx_hidden_Value
	}
	return 0
}

func (x *MetricsSample) GetValuePerSecond() float64 {
	if x != nil {
		return x.xxx_hidden_ValuePerSecond
	}
	return 0
}

func (x *MetricsSample) GetDuration() int64 {
	if x != nil {
		return x.xxx_hidden_Duration
	}
	return 0
}

func (x *MetricsSample) SetTimestamp(v *timestamppb.Timestamp) {
	x.xxx_hidden_Timestamp = v
}

func (x *MetricsSample) SetValue(v int64) {
	x.xxx_hidden_Value = v
}

func (x *MetricsSample) SetValuePerSecond(v float64) {
	x.xxx_hidden_ValuePerSecond = v
}

func (x *MetricsSample) SetDuration(v int64) {
	x.xxx_hidden_Duration = v
}

func (x *MetricsSample) HasTimestamp() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Timestamp != nil
}

func (x *MetricsSample) ClearTimestamp() {
	x.xxx_hidden_Timestamp = nil
}

type MetricsSample_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// timestamp is the time the profile was ingested
	Timestamp *timestamppb.Timestamp
	// value is the cumulative value for the profile
	Value int64
	// value_per_second is the calculated per second average in the steps duration
	ValuePerSecond float64
	// duration is the normalized aggregated duration the metric samples has been observed over.
	Duration int64
}

func (b0 MetricsSample_builder) Build() *MetricsSample {
	m0 := &MetricsSample{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Timestamp = b.Timestamp
	x.xxx_hidden_Value = b.Value
	x.xxx_hidden_ValuePerSecond = b.ValuePerSecond
	x.xxx_hidden_Duration = b.Duration
	return m0
}

// MergeProfile contains parameters for a merge request
type MergeProfile struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Query string                 `protobuf:"bytes,1,opt,name=query,proto3"`
	xxx_hidden_Start *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start,proto3"`
	xxx_hidden_End   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end,proto3"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MergeProfile) Reset() {
	*x = MergeProfile{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeProfile) ProtoMessage() {}

func (x *MergeProfile) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MergeProfile) GetQuery() string {
	if x != nil {
		return x.xxx_hidden_Query
	}
	return ""
}

func (x *MergeProfile) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Start
	}
	return nil
}

func (x *MergeProfile) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_End
	}
	return nil
}

func (x *MergeProfile) SetQuery(v string) {
	x.xxx_hidden_Query = v
}

func (x *MergeProfile) SetStart(v *timestamppb.Timestamp) {
	x.xxx_hidden_Start = v
}

func (x *MergeProfile) SetEnd(v *timestamppb.Timestamp) {
	x.xxx_hidden_End = v
}

func (x *MergeProfile) HasStart() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Start != nil
}

func (x *MergeProfile) HasEnd() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_End != nil
}

func (x *MergeProfile) ClearStart() {
	x.xxx_hidden_Start = nil
}

func (x *MergeProfile) ClearEnd() {
	x.xxx_hidden_End = nil
}

type MergeProfile_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// query is the query string to match profiles for merge
	Query string
	// start is the beginning of the evaluation time window
	Start *timestamppb.Timestamp
	// end is the end of the evaluation time window
	End *timestamppb.Timestamp
}

func (b0 MergeProfile_builder) Build() *MergeProfile {
	m0 := &MergeProfile{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Query = b.Query
	x.xxx_hidden_Start = b.Start
	x.xxx_hidden_End = b.End
	return m0
}

// SingleProfile contains parameters for a single profile query request
type SingleProfile struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Time  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3"`
	xxx_hidden_Query string                 `protobuf:"bytes,2,opt,name=query,proto3"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SingleProfile) Reset() {
	*x = SingleProfile{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleProfile) ProtoMessage() {}

func (x *SingleProfile) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SingleProfile) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Time
	}
	return nil
}

func (x *SingleProfile) GetQuery() string {
	if x != nil {
		return x.xxx_hidden_Query
	}
	return ""
}

func (x *SingleProfile) SetTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_Time = v
}

func (x *SingleProfile) SetQuery(v string) {
	x.xxx_hidden_Query = v
}

func (x *SingleProfile) HasTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Time != nil
}

func (x *SingleProfile) ClearTime() {
	x.xxx_hidden_Time = nil
}

type SingleProfile_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// time is the point in time to perform the profile request
	Time *timestamppb.Timestamp
	// query is the query string to retrieve the profile
	Query string
}

func (b0 SingleProfile_builder) Build() *SingleProfile {
	m0 := &SingleProfile{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Time = b.Time
	x.xxx_hidden_Query = b.Query
	return m0
}

// DiffProfile contains parameters for a profile diff request
type DiffProfile struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_A           *ProfileDiffSelection  `protobuf:"bytes,1,opt,name=a,proto3"`
	xxx_hidden_B           *ProfileDiffSelection  `protobuf:"bytes,2,opt,name=b,proto3"`
	xxx_hidden_Absolute    bool                   `protobuf:"varint,3,opt,name=absolute,proto3,oneof"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DiffProfile) Reset() {
	*x = DiffProfile{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiffProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffProfile) ProtoMessage() {}

func (x *DiffProfile) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DiffProfile) GetA() *ProfileDiffSelection {
	if x != nil {
		return x.xxx_hidden_A
	}
	return nil
}

func (x *DiffProfile) GetB() *ProfileDiffSelection {
	if x != nil {
		return x.xxx_hidden_B
	}
	return nil
}

func (x *DiffProfile) GetAbsolute() bool {
	if x != nil {
		return x.xxx_hidden_Absolute
	}
	return false
}

func (x *DiffProfile) SetA(v *ProfileDiffSelection) {
	x.xxx_hidden_A = v
}

func (x *DiffProfile) SetB(v *ProfileDiffSelection) {
	x.xxx_hidden_B = v
}

func (x *DiffProfile) SetAbsolute(v bool) {
	x.xxx_hidden_Absolute = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *DiffProfile) HasA() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_A != nil
}

func (x *DiffProfile) HasB() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_B != nil
}

func (x *DiffProfile) HasAbsolute() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *DiffProfile) ClearA() {
	x.xxx_hidden_A = nil
}

func (x *DiffProfile) ClearB() {
	x.xxx_hidden_B = nil
}

func (x *DiffProfile) ClearAbsolute() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Absolute = false
}

type DiffProfile_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// a is the first profile to diff
	A *ProfileDiffSelection
	// b is the second profile to diff
	B *ProfileDiffSelection
	// absolute diffing, by default comparisons are relative
	Absolute *bool
}

func (b0 DiffProfile_builder) Build() *DiffProfile {
	m0 := &DiffProfile{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_A = b.A
	x.xxx_hidden_B = b.B
	if b.Absolute != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Absolute = *b.Absolute
	}
	return m0
}

// ProfileDiffSelection contains the parameters of a diff selection
type ProfileDiffSelection struct {
	state              protoimpl.MessageState         `protogen:"opaque.v1"`
	xxx_hidden_Mode    ProfileDiffSelection_Mode      `protobuf:"varint,1,opt,name=mode,proto3,enum=parca.query.v1alpha1.ProfileDiffSelection_Mode"`
	xxx_hidden_Options isProfileDiffSelection_Options `protobuf_oneof:"options"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProfileDiffSelection) Reset() {
	*x = ProfileDiffSelection{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileDiffSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileDiffSelection) ProtoMessage() {}

func (x *ProfileDiffSelection) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProfileDiffSelection) GetMode() ProfileDiffSelection_Mode {
	if x != nil {
		return x.xxx_hidden_Mode
	}
	return ProfileDiffSelection_MODE_SINGLE_UNSPECIFIED
}

func (x *ProfileDiffSelection) GetMerge() *MergeProfile {
	if x != nil {
		if x, ok := x.xxx_hidden_Options.(*profileDiffSelection_Merge); ok {
			return x.Merge
		}
	}
	return nil
}

func (x *ProfileDiffSelection) GetSingle() *SingleProfile {
	if x != nil {
		if x, ok := x.xxx_hidden_Options.(*profileDiffSelection_Single); ok {
			return x.Single
		}
	}
	return nil
}

func (x *ProfileDiffSelection) SetMode(v ProfileDiffSelection_Mode) {
	x.xxx_hidden_Mode = v
}

func (x *ProfileDiffSelection) SetMerge(v *MergeProfile) {
	if v == nil {
		x.xxx_hidden_Options = nil
		return
	}
	x.xxx_hidden_Options = &profileDiffSelection_Merge{v}
}

func (x *ProfileDiffSelection) SetSingle(v *SingleProfile) {
	if v == nil {
		x.xxx_hidden_Options = nil
		return
	}
	x.xxx_hidden_Options = &profileDiffSelection_Single{v}
}

func (x *ProfileDiffSelection) HasOptions() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Options != nil
}

func (x *ProfileDiffSelection) HasMerge() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Options.(*profileDiffSelection_Merge)
	return ok
}

func (x *ProfileDiffSelection) HasSingle() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Options.(*profileDiffSelection_Single)
	return ok
}

func (x *ProfileDiffSelection) ClearOptions() {
	x.xxx_hidden_Options = nil
}

func (x *ProfileDiffSelection) ClearMerge() {
	if _, ok := x.xxx_hidden_Options.(*profileDiffSelection_Merge); ok {
		x.xxx_hidden_Options = nil
	}
}

func (x *ProfileDiffSelection) ClearSingle() {
	if _, ok := x.xxx_hidden_Options.(*profileDiffSelection_Single); ok {
		x.xxx_hidden_Options = nil
	}
}

const ProfileDiffSelection_Options_not_set_case case_ProfileDiffSelection_Options = 0
const ProfileDiffSelection_Merge_case case_ProfileDiffSelection_Options = 2
const ProfileDiffSelection_Single_case case_ProfileDiffSelection_Options = 3

func (x *ProfileDiffSelection) WhichOptions() case_ProfileDiffSelection_Options {
	if x == nil {
		return ProfileDiffSelection_Options_not_set_case
	}
	switch x.xxx_hidden_Options.(type) {
	case *profileDiffSelection_Merge:
		return ProfileDiffSelection_Merge_case
	case *profileDiffSelection_Single:
		return ProfileDiffSelection_Single_case
	default:
		return ProfileDiffSelection_Options_not_set_case
	}
}

type ProfileDiffSelection_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// mode is the selection of the diff mode
	Mode ProfileDiffSelection_Mode
	// options are the available options for a diff selection

	// Fields of oneof xxx_hidden_Options:
	// merge contains options for a merge request
	Merge *MergeProfile
	// single contains options for a single profile request
	Single *SingleProfile
	// -- end of xxx_hidden_Options
}

func (b0 ProfileDiffSelection_builder) Build() *ProfileDiffSelection {
	m0 := &ProfileDiffSelection{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Mode = b.Mode
	if b.Merge != nil {
		x.xxx_hidden_Options = &profileDiffSelection_Merge{b.Merge}
	}
	if b.Single != nil {
		x.xxx_hidden_Options = &profileDiffSelection_Single{b.Single}
	}
	return m0
}

type case_ProfileDiffSelection_Options protoreflect.FieldNumber

func (x case_ProfileDiffSelection_Options) String() string {
	md := file_parca_query_v1alpha1_query_proto_msgTypes[10].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isProfileDiffSelection_Options interface {
	isProfileDiffSelection_Options()
}

type profileDiffSelection_Merge struct {
	// merge contains options for a merge request
	Merge *MergeProfile `protobuf:"bytes,2,opt,name=merge,proto3,oneof"`
}

type profileDiffSelection_Single struct {
	// single contains options for a single profile request
	Single *SingleProfile `protobuf:"bytes,3,opt,name=single,proto3,oneof"`
}

func (*profileDiffSelection_Merge) isProfileDiffSelection_Options() {}

func (*profileDiffSelection_Single) isProfileDiffSelection_Options() {}

// QueryRequest is a request for a profile query
type QueryRequest struct {
	state                        protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_Mode              QueryRequest_Mode       `protobuf:"varint,1,opt,name=mode,proto3,enum=parca.query.v1alpha1.QueryRequest_Mode"`
	xxx_hidden_Options           isQueryRequest_Options  `protobuf_oneof:"options"`
	xxx_hidden_ReportType        QueryRequest_ReportType `protobuf:"varint,5,opt,name=report_type,json=reportType,proto3,enum=parca.query.v1alpha1.QueryRequest_ReportType"`
	xxx_hidden_FilterQuery       *string                 `protobuf:"bytes,6,opt,name=filter_query,json=filterQuery,proto3,oneof"`
	xxx_hidden_NodeTrimThreshold float32                 `protobuf:"fixed32,7,opt,name=node_trim_threshold,json=nodeTrimThreshold,proto3,oneof"`
	xxx_hidden_GroupBy           *GroupBy                `protobuf:"bytes,8,opt,name=group_by,json=groupBy,proto3,oneof"`
	xxx_hidden_SourceReference   *SourceReference        `protobuf:"bytes,9,opt,name=source_reference,json=sourceReference,proto3,oneof"`
	xxx_hidden_RuntimeFilter     *RuntimeFilter          `protobuf:"bytes,10,opt,name=runtime_filter,json=runtimeFilter,proto3,oneof"`
	xxx_hidden_InvertCallStack   bool                    `protobuf:"varint,11,opt,name=invert_call_stack,json=invertCallStack,proto3,oneof"`
	xxx_hidden_Filter            *[]*Filter              `protobuf:"bytes,12,rep,name=filter,proto3"`
	XXX_raceDetectHookData       protoimpl.RaceDetectHookData
	XXX_presence                 [1]uint32
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *QueryRequest) GetMode() QueryRequest_Mode {
	if x != nil {
		return x.xxx_hidden_Mode
	}
	return QueryRequest_MODE_SINGLE_UNSPECIFIED
}

func (x *QueryRequest) GetDiff() *DiffProfile {
	if x != nil {
		if x, ok := x.xxx_hidden_Options.(*queryRequest_Diff); ok {
			return x.Diff
		}
	}
	return nil
}

func (x *QueryRequest) GetMerge() *MergeProfile {
	if x != nil {
		if x, ok := x.xxx_hidden_Options.(*queryRequest_Merge); ok {
			return x.Merge
		}
	}
	return nil
}

func (x *QueryRequest) GetSingle() *SingleProfile {
	if x != nil {
		if x, ok := x.xxx_hidden_Options.(*queryRequest_Single); ok {
			return x.Single
		}
	}
	return nil
}

func (x *QueryRequest) GetReportType() QueryRequest_ReportType {
	if x != nil {
		return x.xxx_hidden_ReportType
	}
	return QueryRequest_REPORT_TYPE_FLAMEGRAPH_UNSPECIFIED
}

// Deprecated: Marked as deprecated in parca/query/v1alpha1/query.proto.
func (x *QueryRequest) GetFilterQuery() string {
	if x != nil {
		if x.xxx_hidden_FilterQuery != nil {
			return *x.xxx_hidden_FilterQuery
		}
		return ""
	}
	return ""
}

func (x *QueryRequest) GetNodeTrimThreshold() float32 {
	if x != nil {
		return x.xxx_hidden_NodeTrimThreshold
	}
	return 0
}

func (x *QueryRequest) GetGroupBy() *GroupBy {
	if x != nil {
		return x.xxx_hidden_GroupBy
	}
	return nil
}

func (x *QueryRequest) GetSourceReference() *SourceReference {
	if x != nil {
		return x.xxx_hidden_SourceReference
	}
	return nil
}

// Deprecated: Marked as deprecated in parca/query/v1alpha1/query.proto.
func (x *QueryRequest) GetRuntimeFilter() *RuntimeFilter {
	if x != nil {
		return x.xxx_hidden_RuntimeFilter
	}
	return nil
}

func (x *QueryRequest) GetInvertCallStack() bool {
	if x != nil {
		return x.xxx_hidden_InvertCallStack
	}
	return false
}

func (x *QueryRequest) GetFilter() []*Filter {
	if x != nil {
		if x.xxx_hidden_Filter != nil {
			return *x.xxx_hidden_Filter
		}
	}
	return nil
}

func (x *QueryRequest) SetMode(v QueryRequest_Mode) {
	x.xxx_hidden_Mode = v
}

func (x *QueryRequest) SetDiff(v *DiffProfile) {
	if v == nil {
		x.xxx_hidden_Options = nil
		return
	}
	x.xxx_hidden_Options = &queryRequest_Diff{v}
}

func (x *QueryRequest) SetMerge(v *MergeProfile) {
	if v == nil {
		x.xxx_hidden_Options = nil
		return
	}
	x.xxx_hidden_Options = &queryRequest_Merge{v}
}

func (x *QueryRequest) SetSingle(v *SingleProfile) {
	if v == nil {
		x.xxx_hidden_Options = nil
		return
	}
	x.xxx_hidden_Options = &queryRequest_Single{v}
}

func (x *QueryRequest) SetReportType(v QueryRequest_ReportType) {
	x.xxx_hidden_ReportType = v
}

// Deprecated: Marked as deprecated in parca/query/v1alpha1/query.proto.
func (x *QueryRequest) SetFilterQuery(v string) {
	x.xxx_hidden_FilterQuery = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 10)
}

func (x *QueryRequest) SetNodeTrimThreshold(v float32) {
	x.xxx_hidden_NodeTrimThreshold = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 10)
}

func (x *QueryRequest) SetGroupBy(v *GroupBy) {
	x.xxx_hidden_GroupBy = v
}

func (x *QueryRequest) SetSourceReference(v *SourceReference) {
	x.xxx_hidden_SourceReference = v
}

// Deprecated: Marked as deprecated in parca/query/v1alpha1/query.proto.
func (x *QueryRequest) SetRuntimeFilter(v *RuntimeFilter) {
	x.xxx_hidden_RuntimeFilter = v
}

func (x *QueryRequest) SetInvertCallStack(v bool) {
	x.xxx_hidden_InvertCallStack = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 10)
}

func (x *QueryRequest) SetFilter(v []*Filter) {
	x.xxx_hidden_Filter = &v
}

func (x *QueryRequest) HasOptions() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Options != nil
}

func (x *QueryRequest) HasDiff() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Options.(*queryRequest_Diff)
	return ok
}

func (x *QueryRequest) HasMerge() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Options.(*queryRequest_Merge)
	return ok
}

func (x *QueryRequest) HasSingle() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Options.(*queryRequest_Single)
	return ok
}

// Deprecated: Marked as deprecated in parca/query/v1alpha1/query.proto.
func (x *QueryRequest) HasFilterQuery() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *QueryRequest) HasNodeTrimThreshold() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *QueryRequest) HasGroupBy() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_GroupBy != nil
}

func (x *QueryRequest) HasSourceReference() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SourceReference != nil
}

// Deprecated: Marked as deprecated in parca/query/v1alpha1/query.proto.
func (x *QueryRequest) HasRuntimeFilter() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_RuntimeFilter != nil
}

func (x *QueryRequest) HasInvertCallStack() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *QueryRequest) ClearOptions() {
	x.xxx_hidden_Options = nil
}

func (x *QueryRequest) ClearDiff() {
	if _, ok := x.xxx_hidden_Options.(*queryRequest_Diff); ok {
		x.xxx_hidden_Options = nil
	}
}

func (x *QueryRequest) ClearMerge() {
	if _, ok := x.xxx_hidden_Options.(*queryRequest_Merge); ok {
		x.xxx_hidden_Options = nil
	}
}

func (x *QueryRequest) ClearSingle() {
	if _, ok := x.xxx_hidden_Options.(*queryRequest_Single); ok {
		x.xxx_hidden_Options = nil
	}
}

// Deprecated: Marked as deprecated in parca/query/v1alpha1/query.proto.
func (x *QueryRequest) ClearFilterQuery() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_FilterQuery = nil
}

func (x *QueryRequest) ClearNodeTrimThreshold() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_NodeTrimThreshold = 0
}

func (x *QueryRequest) ClearGroupBy() {
	x.xxx_hidden_GroupBy = nil
}

func (x *QueryRequest) ClearSourceReference() {
	x.xxx_hidden_SourceReference = nil
}

// Deprecated: Marked as deprecated in parca/query/v1alpha1/query.proto.
func (x *QueryRequest) ClearRuntimeFilter() {
	x.xxx_hidden_RuntimeFilter = nil
}

func (x *QueryRequest) ClearInvertCallStack() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_InvertCallStack = false
}

const QueryRequest_Options_not_set_case case_QueryRequest_Options = 0
const QueryRequest_Diff_case case_QueryRequest_Options = 2
const QueryRequest_Merge_case case_QueryRequest_Options = 3
const QueryRequest_Single_case case_QueryRequest_Options = 4

func (x *QueryRequest) WhichOptions() case_QueryRequest_Options {
	if x == nil {
		return QueryRequest_Options_not_set_case
	}
	switch x.xxx_hidden_Options.(type) {
	case *queryRequest_Diff:
		return QueryRequest_Diff_case
	case *queryRequest_Merge:
		return QueryRequest_Merge_case
	case *queryRequest_Single:
		return QueryRequest_Single_case
	default:
		return QueryRequest_Options_not_set_case
	}
}

type QueryRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// mode indicates the type of query performed
	Mode QueryRequest_Mode
	// options are the options corresponding to the mode

	// Fields of oneof xxx_hidden_Options:
	// diff contains the diff query options
	Diff *DiffProfile
	// merge contains the merge query options
	Merge *MergeProfile
	// single contains the single query options
	Single *SingleProfile
	// -- end of xxx_hidden_Options
	// report_type is the type of report to return
	ReportType QueryRequest_ReportType
	// filter_query is the query string to filter the profile samples
	//
	// Deprecated: Marked as deprecated in parca/query/v1alpha1/query.proto.
	FilterQuery *string
	// node_trim_threshold is the threshold % where the nodes with Value less than this will be removed from the report
	NodeTrimThreshold *float32
	// group_by indicates the fields to group by
	GroupBy *GroupBy
	// source information about the source requested, required if source report is requested
	SourceReference *SourceReference
	// which runtime frames to filter out, often interpreter frames like python or ruby are not super useful by default
	//
	// Deprecated: Marked as deprecated in parca/query/v1alpha1/query.proto.
	RuntimeFilter *RuntimeFilter
	// invert_call_stack inverts the call stacks in the flamegraph
	InvertCallStack *bool
	// a set of filter to apply to the query request
	Filter []*Filter
}

func (b0 QueryRequest_builder) Build() *QueryRequest {
	m0 := &QueryRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Mode = b.Mode
	if b.Diff != nil {
		x.xxx_hidden_Options = &queryRequest_Diff{b.Diff}
	}
	if b.Merge != nil {
		x.xxx_hidden_Options = &queryRequest_Merge{b.Merge}
	}
	if b.Single != nil {
		x.xxx_hidden_Options = &queryRequest_Single{b.Single}
	}
	x.xxx_hidden_ReportType = b.ReportType
	if b.FilterQuery != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 10)
		x.xxx_hidden_FilterQuery = b.FilterQuery
	}
	if b.NodeTrimThreshold != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 10)
		x.xxx_hidden_NodeTrimThreshold = *b.NodeTrimThreshold
	}
	x.xxx_hidden_GroupBy = b.GroupBy
	x.xxx_hidden_SourceReference = b.SourceReference
	x.xxx_hidden_RuntimeFilter = b.RuntimeFilter
	if b.InvertCallStack != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 10)
		x.xxx_hidden_InvertCallStack = *b.InvertCallStack
	}
	x.xxx_hidden_Filter = &b.Filter
	return m0
}

type case_QueryRequest_Options protoreflect.FieldNumber

func (x case_QueryRequest_Options) String() string {
	md := file_parca_query_v1alpha1_query_proto_msgTypes[11].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isQueryRequest_Options interface {
	isQueryRequest_Options()
}

type queryRequest_Diff struct {
	// diff contains the diff query options
	Diff *DiffProfile `protobuf:"bytes,2,opt,name=diff,proto3,oneof"`
}

type queryRequest_Merge struct {
	// merge contains the merge query options
	Merge *MergeProfile `protobuf:"bytes,3,opt,name=merge,proto3,oneof"`
}

type queryRequest_Single struct {
	// single contains the single query options
	Single *SingleProfile `protobuf:"bytes,4,opt,name=single,proto3,oneof"`
}

func (*queryRequest_Diff) isQueryRequest_Options() {}

func (*queryRequest_Merge) isQueryRequest_Options() {}

func (*queryRequest_Single) isQueryRequest_Options() {}

// Filter to apply to the query request
type Filter struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Filter isFilter_Filter        `protobuf_oneof:"filter"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Filter) Reset() {
	*x = Filter{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Filter) GetStackFilter() *StackFilter {
	if x != nil {
		if x, ok := x.xxx_hidden_Filter.(*filter_StackFilter); ok {
			return x.StackFilter
		}
	}
	return nil
}

func (x *Filter) GetFrameFilter() *FrameFilter {
	if x != nil {
		if x, ok := x.xxx_hidden_Filter.(*filter_FrameFilter); ok {
			return x.FrameFilter
		}
	}
	return nil
}

func (x *Filter) SetStackFilter(v *StackFilter) {
	if v == nil {
		x.xxx_hidden_Filter = nil
		return
	}
	x.xxx_hidden_Filter = &filter_StackFilter{v}
}

func (x *Filter) SetFrameFilter(v *FrameFilter) {
	if v == nil {
		x.xxx_hidden_Filter = nil
		return
	}
	x.xxx_hidden_Filter = &filter_FrameFilter{v}
}

func (x *Filter) HasFilter() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Filter != nil
}

func (x *Filter) HasStackFilter() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Filter.(*filter_StackFilter)
	return ok
}

func (x *Filter) HasFrameFilter() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Filter.(*filter_FrameFilter)
	return ok
}

func (x *Filter) ClearFilter() {
	x.xxx_hidden_Filter = nil
}

func (x *Filter) ClearStackFilter() {
	if _, ok := x.xxx_hidden_Filter.(*filter_StackFilter); ok {
		x.xxx_hidden_Filter = nil
	}
}

func (x *Filter) ClearFrameFilter() {
	if _, ok := x.xxx_hidden_Filter.(*filter_FrameFilter); ok {
		x.xxx_hidden_Filter = nil
	}
}

const Filter_Filter_not_set_case case_Filter_Filter = 0
const Filter_StackFilter_case case_Filter_Filter = 1
const Filter_FrameFilter_case case_Filter_Filter = 2

func (x *Filter) WhichFilter() case_Filter_Filter {
	if x == nil {
		return Filter_Filter_not_set_case
	}
	switch x.xxx_hidden_Filter.(type) {
	case *filter_StackFilter:
		return Filter_StackFilter_case
	case *filter_FrameFilter:
		return Filter_FrameFilter_case
	default:
		return Filter_Filter_not_set_case
	}
}

type Filter_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// filter is a oneof type of filter to apply to the query request

	// Fields of oneof xxx_hidden_Filter:
	// stack_filter is a filter for filtering by stacks
	StackFilter *StackFilter
	// frame_filter is a filter for filtering by frames
	FrameFilter *FrameFilter
	// -- end of xxx_hidden_Filter
}

func (b0 Filter_builder) Build() *Filter {
	m0 := &Filter{}
	b, x := &b0, m0
	_, _ = b, x
	if b.StackFilter != nil {
		x.xxx_hidden_Filter = &filter_StackFilter{b.StackFilter}
	}
	if b.FrameFilter != nil {
		x.xxx_hidden_Filter = &filter_FrameFilter{b.FrameFilter}
	}
	return m0
}

type case_Filter_Filter protoreflect.FieldNumber

func (x case_Filter_Filter) String() string {
	md := file_parca_query_v1alpha1_query_proto_msgTypes[12].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isFilter_Filter interface {
	isFilter_Filter()
}

type filter_StackFilter struct {
	// stack_filter is a filter for filtering by stacks
	StackFilter *StackFilter `protobuf:"bytes,1,opt,name=stack_filter,json=stackFilter,proto3,oneof"`
}

type filter_FrameFilter struct {
	// frame_filter is a filter for filtering by frames
	FrameFilter *FrameFilter `protobuf:"bytes,2,opt,name=frame_filter,json=frameFilter,proto3,oneof"`
}

func (*filter_StackFilter) isFilter_Filter() {}

func (*filter_FrameFilter) isFilter_Filter() {}

// StackFilter is a filter for filtering by stacks
type StackFilter struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Filter isStackFilter_Filter   `protobuf_oneof:"filter"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *StackFilter) Reset() {
	*x = StackFilter{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StackFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackFilter) ProtoMessage() {}

func (x *StackFilter) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StackFilter) GetFunctionNameStackFilter() *FunctionNameStackFilter {
	if x != nil {
		if x, ok := x.xxx_hidden_Filter.(*stackFilter_FunctionNameStackFilter); ok {
			return x.FunctionNameStackFilter
		}
	}
	return nil
}

func (x *StackFilter) SetFunctionNameStackFilter(v *FunctionNameStackFilter) {
	if v == nil {
		x.xxx_hidden_Filter = nil
		return
	}
	x.xxx_hidden_Filter = &stackFilter_FunctionNameStackFilter{v}
}

func (x *StackFilter) HasFilter() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Filter != nil
}

func (x *StackFilter) HasFunctionNameStackFilter() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Filter.(*stackFilter_FunctionNameStackFilter)
	return ok
}

func (x *StackFilter) ClearFilter() {
	x.xxx_hidden_Filter = nil
}

func (x *StackFilter) ClearFunctionNameStackFilter() {
	if _, ok := x.xxx_hidden_Filter.(*stackFilter_FunctionNameStackFilter); ok {
		x.xxx_hidden_Filter = nil
	}
}

const StackFilter_Filter_not_set_case case_StackFilter_Filter = 0
const StackFilter_FunctionNameStackFilter_case case_StackFilter_Filter = 1

func (x *StackFilter) WhichFilter() case_StackFilter_Filter {
	if x == nil {
		return StackFilter_Filter_not_set_case
	}
	switch x.xxx_hidden_Filter.(type) {
	case *stackFilter_FunctionNameStackFilter:
		return StackFilter_FunctionNameStackFilter_case
	default:
		return StackFilter_Filter_not_set_case
	}
}

type StackFilter_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// filter contains the different methods in which you can filter a stack

	// Fields of oneof xxx_hidden_Filter:
	// function_name_stack_filter is the function name to filter by
	FunctionNameStackFilter *FunctionNameStackFilter
	// -- end of xxx_hidden_Filter
}

func (b0 StackFilter_builder) Build() *StackFilter {
	m0 := &StackFilter{}
	b, x := &b0, m0
	_, _ = b, x
	if b.FunctionNameStackFilter != nil {
		x.xxx_hidden_Filter = &stackFilter_FunctionNameStackFilter{b.FunctionNameStackFilter}
	}
	return m0
}

type case_StackFilter_Filter protoreflect.FieldNumber

func (x case_StackFilter_Filter) String() string {
	md := file_parca_query_v1alpha1_query_proto_msgTypes[13].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isStackFilter_Filter interface {
	isStackFilter_Filter()
}

type stackFilter_FunctionNameStackFilter struct {
	// function_name_stack_filter is the function name to filter by
	FunctionNameStackFilter *FunctionNameStackFilter `protobuf:"bytes,1,opt,name=function_name_stack_filter,json=functionNameStackFilter,proto3,oneof"`
}

func (*stackFilter_FunctionNameStackFilter) isStackFilter_Filter() {}

// FunctionNameStackFilter is a filter for filtering by function name
type FunctionNameStackFilter struct {
	state                       protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_FunctionToFilter string                 `protobuf:"bytes,1,opt,name=function_to_filter,json=functionToFilter,proto3"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *FunctionNameStackFilter) Reset() {
	*x = FunctionNameStackFilter{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionNameStackFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionNameStackFilter) ProtoMessage() {}

func (x *FunctionNameStackFilter) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FunctionNameStackFilter) GetFunctionToFilter() string {
	if x != nil {
		return x.xxx_hidden_FunctionToFilter
	}
	return ""
}

func (x *FunctionNameStackFilter) SetFunctionToFilter(v string) {
	x.xxx_hidden_FunctionToFilter = v
}

type FunctionNameStackFilter_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// function_to_filter is the function name to filter by
	FunctionToFilter string
}

func (b0 FunctionNameStackFilter_builder) Build() *FunctionNameStackFilter {
	m0 := &FunctionNameStackFilter{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_FunctionToFilter = b.FunctionToFilter
	return m0
}

// FrameFilter is a filter for filtering by frames
type FrameFilter struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Filter isFrameFilter_Filter   `protobuf_oneof:"filter"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *FrameFilter) Reset() {
	*x = FrameFilter{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrameFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameFilter) ProtoMessage() {}

func (x *FrameFilter) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FrameFilter) GetBinaryFrameFilter() *BinaryFrameFilter {
	if x != nil {
		if x, ok := x.xxx_hidden_Filter.(*frameFilter_BinaryFrameFilter); ok {
			return x.BinaryFrameFilter
		}
	}
	return nil
}

func (x *FrameFilter) SetBinaryFrameFilter(v *BinaryFrameFilter) {
	if v == nil {
		x.xxx_hidden_Filter = nil
		return
	}
	x.xxx_hidden_Filter = &frameFilter_BinaryFrameFilter{v}
}

func (x *FrameFilter) HasFilter() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Filter != nil
}

func (x *FrameFilter) HasBinaryFrameFilter() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Filter.(*frameFilter_BinaryFrameFilter)
	return ok
}

func (x *FrameFilter) ClearFilter() {
	x.xxx_hidden_Filter = nil
}

func (x *FrameFilter) ClearBinaryFrameFilter() {
	if _, ok := x.xxx_hidden_Filter.(*frameFilter_BinaryFrameFilter); ok {
		x.xxx_hidden_Filter = nil
	}
}

const FrameFilter_Filter_not_set_case case_FrameFilter_Filter = 0
const FrameFilter_BinaryFrameFilter_case case_FrameFilter_Filter = 1

func (x *FrameFilter) WhichFilter() case_FrameFilter_Filter {
	if x == nil {
		return FrameFilter_Filter_not_set_case
	}
	switch x.xxx_hidden_Filter.(type) {
	case *frameFilter_BinaryFrameFilter:
		return FrameFilter_BinaryFrameFilter_case
	default:
		return FrameFilter_Filter_not_set_case
	}
}

type FrameFilter_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// filter contains the different methods in which you can filter a frame

	// Fields of oneof xxx_hidden_Filter:
	// binary_frame_filter is the list of binary names to filter by
	BinaryFrameFilter *BinaryFrameFilter
	// -- end of xxx_hidden_Filter
}

func (b0 FrameFilter_builder) Build() *FrameFilter {
	m0 := &FrameFilter{}
	b, x := &b0, m0
	_, _ = b, x
	if b.BinaryFrameFilter != nil {
		x.xxx_hidden_Filter = &frameFilter_BinaryFrameFilter{b.BinaryFrameFilter}
	}
	return m0
}

type case_FrameFilter_Filter protoreflect.FieldNumber

func (x case_FrameFilter_Filter) String() string {
	md := file_parca_query_v1alpha1_query_proto_msgTypes[15].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isFrameFilter_Filter interface {
	isFrameFilter_Filter()
}

type frameFilter_BinaryFrameFilter struct {
	// binary_frame_filter is the list of binary names to filter by
	BinaryFrameFilter *BinaryFrameFilter `protobuf:"bytes,1,opt,name=binary_frame_filter,json=binaryFrameFilter,proto3,oneof"`
}

func (*frameFilter_BinaryFrameFilter) isFrameFilter_Filter() {}

// BinaryFrameFilter is a filter for filtering by binaries
type BinaryFrameFilter struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_IncludeBinaries []string               `protobuf:"bytes,1,rep,name=include_binaries,json=includeBinaries,proto3"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *BinaryFrameFilter) Reset() {
	*x = BinaryFrameFilter{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BinaryFrameFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryFrameFilter) ProtoMessage() {}

func (x *BinaryFrameFilter) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BinaryFrameFilter) GetIncludeBinaries() []string {
	if x != nil {
		return x.xxx_hidden_IncludeBinaries
	}
	return nil
}

func (x *BinaryFrameFilter) SetIncludeBinaries(v []string) {
	x.xxx_hidden_IncludeBinaries = v
}

type BinaryFrameFilter_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// include_binaries is the list of binaries to filter by
	IncludeBinaries []string
}

func (b0 BinaryFrameFilter_builder) Build() *BinaryFrameFilter {
	m0 := &BinaryFrameFilter{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_IncludeBinaries = b.IncludeBinaries
	return m0
}

// RuntimeFilter configures which runtimes to filter frames out for.
type RuntimeFilter struct {
	state                          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ShowPython          bool                   `protobuf:"varint,1,opt,name=show_python,json=showPython,proto3"`
	xxx_hidden_ShowRuby            bool                   `protobuf:"varint,2,opt,name=show_ruby,json=showRuby,proto3"`
	xxx_hidden_ShowInterpretedOnly bool                   `protobuf:"varint,3,opt,name=show_interpreted_only,json=showInterpretedOnly,proto3"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *RuntimeFilter) Reset() {
	*x = RuntimeFilter{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuntimeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeFilter) ProtoMessage() {}

func (x *RuntimeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RuntimeFilter) GetShowPython() bool {
	if x != nil {
		return x.xxx_hidden_ShowPython
	}
	return false
}

func (x *RuntimeFilter) GetShowRuby() bool {
	if x != nil {
		return x.xxx_hidden_ShowRuby
	}
	return false
}

func (x *RuntimeFilter) GetShowInterpretedOnly() bool {
	if x != nil {
		return x.xxx_hidden_ShowInterpretedOnly
	}
	return false
}

func (x *RuntimeFilter) SetShowPython(v bool) {
	x.xxx_hidden_ShowPython = v
}

func (x *RuntimeFilter) SetShowRuby(v bool) {
	x.xxx_hidden_ShowRuby = v
}

func (x *RuntimeFilter) SetShowInterpretedOnly(v bool) {
	x.xxx_hidden_ShowInterpretedOnly = v
}

type RuntimeFilter_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Whether to show frames of the python runtime.
	ShowPython bool
	// Whether to show frames of the ruby runtime.
	ShowRuby bool
	// Whether to only show interpreted frames.
	ShowInterpretedOnly bool
}

func (b0 RuntimeFilter_builder) Build() *RuntimeFilter {
	m0 := &RuntimeFilter{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ShowPython = b.ShowPython
	x.xxx_hidden_ShowRuby = b.ShowRuby
	x.xxx_hidden_ShowInterpretedOnly = b.ShowInterpretedOnly
	return m0
}

// SourceReference contains a reference to source code.
type SourceReference struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_BuildId    string                 `protobuf:"bytes,1,opt,name=build_id,json=buildId,proto3"`
	xxx_hidden_Filename   string                 `protobuf:"bytes,2,opt,name=filename,proto3"`
	xxx_hidden_SourceOnly bool                   `protobuf:"varint,3,opt,name=source_only,json=sourceOnly,proto3"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SourceReference) Reset() {
	*x = SourceReference{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceReference) ProtoMessage() {}

func (x *SourceReference) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SourceReference) GetBuildId() string {
	if x != nil {
		return x.xxx_hidden_BuildId
	}
	return ""
}

func (x *SourceReference) GetFilename() string {
	if x != nil {
		return x.xxx_hidden_Filename
	}
	return ""
}

func (x *SourceReference) GetSourceOnly() bool {
	if x != nil {
		return x.xxx_hidden_SourceOnly
	}
	return false
}

func (x *SourceReference) SetBuildId(v string) {
	x.xxx_hidden_BuildId = v
}

func (x *SourceReference) SetFilename(v string) {
	x.xxx_hidden_Filename = v
}

func (x *SourceReference) SetSourceOnly(v bool) {
	x.xxx_hidden_SourceOnly = v
}

type SourceReference_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The build ID to request the source of.
	BuildId string
	// The filename requested.
	Filename string
	// Whether to perform a full query or just retrieve the source.
	SourceOnly bool
}

func (b0 SourceReference_builder) Build() *SourceReference {
	m0 := &SourceReference{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_BuildId = b.BuildId
	x.xxx_hidden_Filename = b.Filename
	x.xxx_hidden_SourceOnly = b.SourceOnly
	return m0
}

// GroupBy encapsulates the repeated fields to group by
type GroupBy struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Fields []string               `protobuf:"bytes,1,rep,name=fields,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GroupBy) Reset() {
	*x = GroupBy{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupBy) ProtoMessage() {}

func (x *GroupBy) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GroupBy) GetFields() []string {
	if x != nil {
		return x.xxx_hidden_Fields
	}
	return nil
}

func (x *GroupBy) SetFields(v []string) {
	x.xxx_hidden_Fields = v
}

type GroupBy_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// the names of the fields to group by.
	// special fields are the ones prefixed with "labels." which are grouping by pprof labels.
	Fields []string
}

func (b0 GroupBy_builder) Build() *GroupBy {
	m0 := &GroupBy{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Fields = b.Fields
	return m0
}

// Top is the top report type
type Top struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_List     *[]*TopNode            `protobuf:"bytes,1,rep,name=list,proto3"`
	xxx_hidden_Reported int32                  `protobuf:"varint,2,opt,name=reported,proto3"`
	xxx_hidden_Total    int32                  `protobuf:"varint,3,opt,name=total,proto3"`
	xxx_hidden_Unit     string                 `protobuf:"bytes,4,opt,name=unit,proto3"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Top) Reset() {
	*x = Top{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Top) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Top) ProtoMessage() {}

func (x *Top) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Top) GetList() []*TopNode {
	if x != nil {
		if x.xxx_hidden_List != nil {
			return *x.xxx_hidden_List
		}
	}
	return nil
}

func (x *Top) GetReported() int32 {
	if x != nil {
		return x.xxx_hidden_Reported
	}
	return 0
}

// Deprecated: Marked as deprecated in parca/query/v1alpha1/query.proto.
func (x *Top) GetTotal() int32 {
	if x != nil {
		return x.xxx_hidden_Total
	}
	return 0
}

func (x *Top) GetUnit() string {
	if x != nil {
		return x.xxx_hidden_Unit
	}
	return ""
}

func (x *Top) SetList(v []*TopNode) {
	x.xxx_hidden_List = &v
}

func (x *Top) SetReported(v int32) {
	x.xxx_hidden_Reported = v
}

// Deprecated: Marked as deprecated in parca/query/v1alpha1/query.proto.
func (x *Top) SetTotal(v int32) {
	x.xxx_hidden_Total = v
}

func (x *Top) SetUnit(v string) {
	x.xxx_hidden_Unit = v
}

type Top_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// list are the list of ordered elements of the table
	List []*TopNode
	// reported is the number of lines reported
	Reported int32
	// total is the number of lines that exist in the report
	// Use total from the top level query response instead.
	//
	// Deprecated: Marked as deprecated in parca/query/v1alpha1/query.proto.
	Total int32
	// unit is the unit represented by top table
	Unit string
}

func (b0 Top_builder) Build() *Top {
	m0 := &Top{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_List = &b.List
	x.xxx_hidden_Reported = b.Reported
	x.xxx_hidden_Total = b.Total
	x.xxx_hidden_Unit = b.Unit
	return m0
}

// TopNode is a node entry in a top list
type TopNode struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Meta       *TopNodeMeta           `protobuf:"bytes,1,opt,name=meta,proto3"`
	xxx_hidden_Cumulative int64                  `protobuf:"varint,2,opt,name=cumulative,proto3"`
	xxx_hidden_Flat       int64                  `protobuf:"varint,3,opt,name=flat,proto3"`
	xxx_hidden_Diff       int64                  `protobuf:"varint,4,opt,name=diff,proto3"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TopNode) Reset() {
	*x = TopNode{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopNode) ProtoMessage() {}

func (x *TopNode) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TopNode) GetMeta() *TopNodeMeta {
	if x != nil {
		return x.xxx_hidden_Meta
	}
	return nil
}

func (x *TopNode) GetCumulative() int64 {
	if x != nil {
		return x.xxx_hidden_Cumulative
	}
	return 0
}

func (x *TopNode) GetFlat() int64 {
	if x != nil {
		return x.xxx_hidden_Flat
	}
	return 0
}

func (x *TopNode) GetDiff() int64 {
	if x != nil {
		return x.xxx_hidden_Diff
	}
	return 0
}

func (x *TopNode) SetMeta(v *TopNodeMeta) {
	x.xxx_hidden_Meta = v
}

func (x *TopNode) SetCumulative(v int64) {
	x.xxx_hidden_Cumulative = v
}

func (x *TopNode) SetFlat(v int64) {
	x.xxx_hidden_Flat = v
}

func (x *TopNode) SetDiff(v int64) {
	x.xxx_hidden_Diff = v
}

func (x *TopNode) HasMeta() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Meta != nil
}

func (x *TopNode) ClearMeta() {
	x.xxx_hidden_Meta = nil
}

type TopNode_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// meta is the metadata about the node
	Meta *TopNodeMeta
	// cumulative is the cumulative value of the node
	Cumulative int64
	// flat is the flat value of the node
	Flat int64
	// diff is the diff value between two profiles
	Diff int64
}

func (b0 TopNode_builder) Build() *TopNode {
	m0 := &TopNode{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Meta = b.Meta
	x.xxx_hidden_Cumulative = b.Cumulative
	x.xxx_hidden_Flat = b.Flat
	x.xxx_hidden_Diff = b.Diff
	return m0
}

// TopNodeMeta is the metadata for a given node
type TopNodeMeta struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Location *v1alpha11.Location    `protobuf:"bytes,1,opt,name=location,proto3"`
	xxx_hidden_Mapping  *v1alpha11.Mapping     `protobuf:"bytes,2,opt,name=mapping,proto3"`
	xxx_hidden_Function *v1alpha11.Function    `protobuf:"bytes,3,opt,name=function,proto3"`
	xxx_hidden_Line     *v1alpha11.Line        `protobuf:"bytes,4,opt,name=line,proto3"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TopNodeMeta) Reset() {
	*x = TopNodeMeta{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopNodeMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopNodeMeta) ProtoMessage() {}

func (x *TopNodeMeta) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TopNodeMeta) GetLocation() *v1alpha11.Location {
	if x != nil {
		return x.xxx_hidden_Location
	}
	return nil
}

func (x *TopNodeMeta) GetMapping() *v1alpha11.Mapping {
	if x != nil {
		return x.xxx_hidden_Mapping
	}
	return nil
}

func (x *TopNodeMeta) GetFunction() *v1alpha11.Function {
	if x != nil {
		return x.xxx_hidden_Function
	}
	return nil
}

func (x *TopNodeMeta) GetLine() *v1alpha11.Line {
	if x != nil {
		return x.xxx_hidden_Line
	}
	return nil
}

func (x *TopNodeMeta) SetLocation(v *v1alpha11.Location) {
	x.xxx_hidden_Location = v
}

func (x *TopNodeMeta) SetMapping(v *v1alpha11.Mapping) {
	x.xxx_hidden_Mapping = v
}

func (x *TopNodeMeta) SetFunction(v *v1alpha11.Function) {
	x.xxx_hidden_Function = v
}

func (x *TopNodeMeta) SetLine(v *v1alpha11.Line) {
	x.xxx_hidden_Line = v
}

func (x *TopNodeMeta) HasLocation() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Location != nil
}

func (x *TopNodeMeta) HasMapping() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Mapping != nil
}

func (x *TopNodeMeta) HasFunction() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Function != nil
}

func (x *TopNodeMeta) HasLine() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Line != nil
}

func (x *TopNodeMeta) ClearLocation() {
	x.xxx_hidden_Location = nil
}

func (x *TopNodeMeta) ClearMapping() {
	x.xxx_hidden_Mapping = nil
}

func (x *TopNodeMeta) ClearFunction() {
	x.xxx_hidden_Function = nil
}

func (x *TopNodeMeta) ClearLine() {
	x.xxx_hidden_Line = nil
}

type TopNodeMeta_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// location is the location for the code
	Location *v1alpha11.Location
	// mapping is the mapping into code
	Mapping *v1alpha11.Mapping
	// function is the function information
	Function *v1alpha11.Function
	// line is the line location
	Line *v1alpha11.Line
}

func (b0 TopNodeMeta_builder) Build() *TopNodeMeta {
	m0 := &TopNodeMeta{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Location = b.Location
	x.xxx_hidden_Mapping = b.Mapping
	x.xxx_hidden_Function = b.Function
	x.xxx_hidden_Line = b.Line
	return m0
}

// Flamegraph is the flame graph report type
type Flamegraph struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Root           *FlamegraphRootNode    `protobuf:"bytes,1,opt,name=root,proto3"`
	xxx_hidden_Total          int64                  `protobuf:"varint,2,opt,name=total,proto3"`
	xxx_hidden_Unit           string                 `protobuf:"bytes,3,opt,name=unit,proto3"`
	xxx_hidden_Height         int32                  `protobuf:"varint,4,opt,name=height,proto3"`
	xxx_hidden_StringTable    []string               `protobuf:"bytes,5,rep,name=string_table,json=stringTable,proto3"`
	xxx_hidden_Locations      *[]*v1alpha11.Location `protobuf:"bytes,6,rep,name=locations,proto3"`
	xxx_hidden_Mapping        *[]*v1alpha11.Mapping  `protobuf:"bytes,7,rep,name=mapping,proto3"`
	xxx_hidden_Function       *[]*v1alpha11.Function `protobuf:"bytes,8,rep,name=function,proto3"`
	xxx_hidden_UntrimmedTotal int64                  `protobuf:"varint,9,opt,name=untrimmed_total,json=untrimmedTotal,proto3"`
	xxx_hidden_Trimmed        int64                  `protobuf:"varint,10,opt,name=trimmed,proto3"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *Flamegraph) Reset() {
	*x = Flamegraph{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flamegraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flamegraph) ProtoMessage() {}

func (x *Flamegraph) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Flamegraph) GetRoot() *FlamegraphRootNode {
	if x != nil {
		return x.xxx_hidden_Root
	}
	return nil
}

// Deprecated: Marked as deprecated in parca/query/v1alpha1/query.proto.
func (x *Flamegraph) GetTotal() int64 {
	if x != nil {
		return x.xxx_hidden_Total
	}
	return 0
}

func (x *Flamegraph) GetUnit() string {
	if x != nil {
		return x.xxx_hidden_Unit
	}
	return ""
}

func (x *Flamegraph) GetHeight() int32 {
	if x != nil {
		return x.xxx_hidden_Height
	}
	return 0
}

func (x *Flamegraph) GetStringTable() []string {
	if x != nil {
		return x.xxx_hidden_StringTable
	}
	return nil
}

func (x *Flamegraph) GetLocations() []*v1alpha11.Location {
	if x != nil {
		if x.xxx_hidden_Locations != nil {
			return *x.xxx_hidden_Locations
		}
	}
	return nil
}

func (x *Flamegraph) GetMapping() []*v1alpha11.Mapping {
	if x != nil {
		if x.xxx_hidden_Mapping != nil {
			return *x.xxx_hidden_Mapping
		}
	}
	return nil
}

func (x *Flamegraph) GetFunction() []*v1alpha11.Function {
	if x != nil {
		if x.xxx_hidden_Function != nil {
			return *x.xxx_hidden_Function
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in parca/query/v1alpha1/query.proto.
func (x *Flamegraph) GetUntrimmedTotal() int64 {
	if x != nil {
		return x.xxx_hidden_UntrimmedTotal
	}
	return 0
}

func (x *Flamegraph) GetTrimmed() int64 {
	if x != nil {
		return x.xxx_hidden_Trimmed
	}
	return 0
}

func (x *Flamegraph) SetRoot(v *FlamegraphRootNode) {
	x.xxx_hidden_Root = v
}

// Deprecated: Marked as deprecated in parca/query/v1alpha1/query.proto.
func (x *Flamegraph) SetTotal(v int64) {
	x.xxx_hidden_Total = v
}

func (x *Flamegraph) SetUnit(v string) {
	x.xxx_hidden_Unit = v
}

func (x *Flamegraph) SetHeight(v int32) {
	x.xxx_hidden_Height = v
}

func (x *Flamegraph) SetStringTable(v []string) {
	x.xxx_hidden_StringTable = v
}

func (x *Flamegraph) SetLocations(v []*v1alpha11.Location) {
	x.xxx_hidden_Locations = &v
}

func (x *Flamegraph) SetMapping(v []*v1alpha11.Mapping) {
	x.xxx_hidden_Mapping = &v
}

func (x *Flamegraph) SetFunction(v []*v1alpha11.Function) {
	x.xxx_hidden_Function = &v
}

// Deprecated: Marked as deprecated in parca/query/v1alpha1/query.proto.
func (x *Flamegraph) SetUntrimmedTotal(v int64) {
	x.xxx_hidden_UntrimmedTotal = v
}

func (x *Flamegraph) SetTrimmed(v int64) {
	x.xxx_hidden_Trimmed = v
}

func (x *Flamegraph) HasRoot() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Root != nil
}

func (x *Flamegraph) ClearRoot() {
	x.xxx_hidden_Root = nil
}

type Flamegraph_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// root is the root of the flame graph
	Root *FlamegraphRootNode
	// total is the total weight of the flame graph
	// Use total from the top level query response instead.
	//
	// Deprecated: Marked as deprecated in parca/query/v1alpha1/query.proto.
	Total int64
	// unit is the unit represented by the flame graph
	Unit string
	// height is the max height of the graph
	Height int32
	// string_table holds all deduplicated strings used in the meta data.
	StringTable []string
	// locations deduplicated by their ID to be referenced by nodes.
	Locations []*v1alpha11.Location
	// mapping deduplicated by their ID to be referenced by nodes.
	Mapping []*v1alpha11.Mapping
	// function deduplicated by their ID to be referenced by nodes.
	Function []*v1alpha11.Function
	// untrimmed_total is the total weight of the flame graph before trimming.
	// Use trimmed instead.
	//
	// Deprecated: Marked as deprecated in parca/query/v1alpha1/query.proto.
	UntrimmedTotal int64
	// trimmed is the amount of cumulative value trimmed from the flame graph.
	Trimmed int64
}

func (b0 Flamegraph_builder) Build() *Flamegraph {
	m0 := &Flamegraph{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Root = b.Root
	x.xxx_hidden_Total = b.Total
	x.xxx_hidden_Unit = b.Unit
	x.xxx_hidden_Height = b.Height
	x.xxx_hidden_StringTable = b.StringTable
	x.xxx_hidden_Locations = &b.Locations
	x.xxx_hidden_Mapping = &b.Mapping
	x.xxx_hidden_Function = &b.Function
	x.xxx_hidden_UntrimmedTotal = b.UntrimmedTotal
	x.xxx_hidden_Trimmed = b.Trimmed
	return m0
}

// Flamegraph is the flame graph report type
type FlamegraphArrow struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Record  []byte                 `protobuf:"bytes,1,opt,name=record,proto3"`
	xxx_hidden_Unit    string                 `protobuf:"bytes,2,opt,name=unit,proto3"`
	xxx_hidden_Height  int32                  `protobuf:"varint,3,opt,name=height,proto3"`
	xxx_hidden_Trimmed int64                  `protobuf:"varint,4,opt,name=trimmed,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *FlamegraphArrow) Reset() {
	*x = FlamegraphArrow{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlamegraphArrow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlamegraphArrow) ProtoMessage() {}

func (x *FlamegraphArrow) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FlamegraphArrow) GetRecord() []byte {
	if x != nil {
		return x.xxx_hidden_Record
	}
	return nil
}

func (x *FlamegraphArrow) GetUnit() string {
	if x != nil {
		return x.xxx_hidden_Unit
	}
	return ""
}

func (x *FlamegraphArrow) GetHeight() int32 {
	if x != nil {
		return x.xxx_hidden_Height
	}
	return 0
}

func (x *FlamegraphArrow) GetTrimmed() int64 {
	if x != nil {
		return x.xxx_hidden_Trimmed
	}
	return 0
}

func (x *FlamegraphArrow) SetRecord(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Record = v
}

func (x *FlamegraphArrow) SetUnit(v string) {
	x.xxx_hidden_Unit = v
}

func (x *FlamegraphArrow) SetHeight(v int32) {
	x.xxx_hidden_Height = v
}

func (x *FlamegraphArrow) SetTrimmed(v int64) {
	x.xxx_hidden_Trimmed = v
}

type FlamegraphArrow_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// record is the arrow record containing the actual flamegraph data
	Record []byte
	// unit is the unit represented by the flame graph
	Unit string
	// height is the max height of the graph
	Height int32
	// trimmed is the amount of cumulative value trimmed from the flame graph.
	Trimmed int64
}

func (b0 FlamegraphArrow_builder) Build() *FlamegraphArrow {
	m0 := &FlamegraphArrow{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Record = b.Record
	x.xxx_hidden_Unit = b.Unit
	x.xxx_hidden_Height = b.Height
	x.xxx_hidden_Trimmed = b.Trimmed
	return m0
}

// Source is the result of the source report type.
type Source struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Record []byte                 `protobuf:"bytes,1,opt,name=record,proto3"`
	xxx_hidden_Source string                 `protobuf:"bytes,2,opt,name=source,proto3"`
	xxx_hidden_Unit   string                 `protobuf:"bytes,3,opt,name=unit,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Source) Reset() {
	*x = Source{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Source) GetRecord() []byte {
	if x != nil {
		return x.xxx_hidden_Record
	}
	return nil
}

func (x *Source) GetSource() string {
	if x != nil {
		return x.xxx_hidden_Source
	}
	return ""
}

func (x *Source) GetUnit() string {
	if x != nil {
		return x.xxx_hidden_Unit
	}
	return ""
}

func (x *Source) SetRecord(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Record = v
}

func (x *Source) SetSource(v string) {
	x.xxx_hidden_Source = v
}

func (x *Source) SetUnit(v string) {
	x.xxx_hidden_Unit = v
}

type Source_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// An arrow record that contains a row per source code line with value and diff columns for flat and cumulative.
	Record []byte
	// The actual source file content.
	Source string
	// The unit of the values in the record.
	Unit string
}

func (b0 Source_builder) Build() *Source {
	m0 := &Source{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Record = b.Record
	x.xxx_hidden_Source = b.Source
	x.xxx_hidden_Unit = b.Unit
	return m0
}

// FlamegraphRootNode is a root node of a flame graph
type FlamegraphRootNode struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Cumulative int64                  `protobuf:"varint,1,opt,name=cumulative,proto3"`
	xxx_hidden_Diff       int64                  `protobuf:"varint,2,opt,name=diff,proto3"`
	xxx_hidden_Children   *[]*FlamegraphNode     `protobuf:"bytes,3,rep,name=children,proto3"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *FlamegraphRootNode) Reset() {
	*x = FlamegraphRootNode{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlamegraphRootNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlamegraphRootNode) ProtoMessage() {}

func (x *FlamegraphRootNode) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FlamegraphRootNode) GetCumulative() int64 {
	if x != nil {
		return x.xxx_hidden_Cumulative
	}
	return 0
}

func (x *FlamegraphRootNode) GetDiff() int64 {
	if x != nil {
		return x.xxx_hidden_Diff
	}
	return 0
}

func (x *FlamegraphRootNode) GetChildren() []*FlamegraphNode {
	if x != nil {
		if x.xxx_hidden_Children != nil {
			return *x.xxx_hidden_Children
		}
	}
	return nil
}

func (x *FlamegraphRootNode) SetCumulative(v int64) {
	x.xxx_hidden_Cumulative = v
}

func (x *FlamegraphRootNode) SetDiff(v int64) {
	x.xxx_hidden_Diff = v
}

func (x *FlamegraphRootNode) SetChildren(v []*FlamegraphNode) {
	x.xxx_hidden_Children = &v
}

type FlamegraphRootNode_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// cumulative is the cumulative value of the graph
	Cumulative int64
	// diff is the diff
	Diff int64
	// children are the list of the children of the root node
	Children []*FlamegraphNode
}

func (b0 FlamegraphRootNode_builder) Build() *FlamegraphRootNode {
	m0 := &FlamegraphRootNode{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Cumulative = b.Cumulative
	x.xxx_hidden_Diff = b.Diff
	x.xxx_hidden_Children = &b.Children
	return m0
}

// FlamegraphNode represents a node in the graph
type FlamegraphNode struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Meta       *FlamegraphNodeMeta    `protobuf:"bytes,1,opt,name=meta,proto3"`
	xxx_hidden_Cumulative int64                  `protobuf:"varint,2,opt,name=cumulative,proto3"`
	xxx_hidden_Diff       int64                  `protobuf:"varint,3,opt,name=diff,proto3"`
	xxx_hidden_Children   *[]*FlamegraphNode     `protobuf:"bytes,4,rep,name=children,proto3"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *FlamegraphNode) Reset() {
	*x = FlamegraphNode{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlamegraphNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlamegraphNode) ProtoMessage() {}

func (x *FlamegraphNode) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FlamegraphNode) GetMeta() *FlamegraphNodeMeta {
	if x != nil {
		return x.xxx_hidden_Meta
	}
	return nil
}

func (x *FlamegraphNode) GetCumulative() int64 {
	if x != nil {
		return x.xxx_hidden_Cumulative
	}
	return 0
}

func (x *FlamegraphNode) GetDiff() int64 {
	if x != nil {
		return x.xxx_hidden_Diff
	}
	return 0
}

func (x *FlamegraphNode) GetChildren() []*FlamegraphNode {
	if x != nil {
		if x.xxx_hidden_Children != nil {
			return *x.xxx_hidden_Children
		}
	}
	return nil
}

func (x *FlamegraphNode) SetMeta(v *FlamegraphNodeMeta) {
	x.xxx_hidden_Meta = v
}

func (x *FlamegraphNode) SetCumulative(v int64) {
	x.xxx_hidden_Cumulative = v
}

func (x *FlamegraphNode) SetDiff(v int64) {
	x.xxx_hidden_Diff = v
}

func (x *FlamegraphNode) SetChildren(v []*FlamegraphNode) {
	x.xxx_hidden_Children = &v
}

func (x *FlamegraphNode) HasMeta() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Meta != nil
}

func (x *FlamegraphNode) ClearMeta() {
	x.xxx_hidden_Meta = nil
}

type FlamegraphNode_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// meta is the metadata about the node
	Meta *FlamegraphNodeMeta
	// cumulative is the cumulative value of the node
	Cumulative int64
	// diff is the diff
	Diff int64
	// children are the child nodes
	Children []*FlamegraphNode
}

func (b0 FlamegraphNode_builder) Build() *FlamegraphNode {
	m0 := &FlamegraphNode{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Meta = b.Meta
	x.xxx_hidden_Cumulative = b.Cumulative
	x.xxx_hidden_Diff = b.Diff
	x.xxx_hidden_Children = &b.Children
	return m0
}

// FlamegraphNodeMeta is the metadata for a given node
type FlamegraphNodeMeta struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Location      *v1alpha11.Location    `protobuf:"bytes,1,opt,name=location,proto3"`
	xxx_hidden_Mapping       *v1alpha11.Mapping     `protobuf:"bytes,2,opt,name=mapping,proto3"`
	xxx_hidden_Function      *v1alpha11.Function    `protobuf:"bytes,3,opt,name=function,proto3"`
	xxx_hidden_Line          *v1alpha11.Line        `protobuf:"bytes,4,opt,name=line,proto3"`
	xxx_hidden_LocationIndex uint32                 `protobuf:"varint,5,opt,name=location_index,json=locationIndex,proto3"`
	xxx_hidden_LineIndex     uint32                 `protobuf:"varint,6,opt,name=line_index,json=lineIndex,proto3"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *FlamegraphNodeMeta) Reset() {
	*x = FlamegraphNodeMeta{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlamegraphNodeMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlamegraphNodeMeta) ProtoMessage() {}

func (x *FlamegraphNodeMeta) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FlamegraphNodeMeta) GetLocation() *v1alpha11.Location {
	if x != nil {
		return x.xxx_hidden_Location
	}
	return nil
}

func (x *FlamegraphNodeMeta) GetMapping() *v1alpha11.Mapping {
	if x != nil {
		return x.xxx_hidden_Mapping
	}
	return nil
}

func (x *FlamegraphNodeMeta) GetFunction() *v1alpha11.Function {
	if x != nil {
		return x.xxx_hidden_Function
	}
	return nil
}

func (x *FlamegraphNodeMeta) GetLine() *v1alpha11.Line {
	if x != nil {
		return x.xxx_hidden_Line
	}
	return nil
}

func (x *FlamegraphNodeMeta) GetLocationIndex() uint32 {
	if x != nil {
		return x.xxx_hidden_LocationIndex
	}
	return 0
}

func (x *FlamegraphNodeMeta) GetLineIndex() uint32 {
	if x != nil {
		return x.xxx_hidden_LineIndex
	}
	return 0
}

func (x *FlamegraphNodeMeta) SetLocation(v *v1alpha11.Location) {
	x.xxx_hidden_Location = v
}

func (x *FlamegraphNodeMeta) SetMapping(v *v1alpha11.Mapping) {
	x.xxx_hidden_Mapping = v
}

func (x *FlamegraphNodeMeta) SetFunction(v *v1alpha11.Function) {
	x.xxx_hidden_Function = v
}

func (x *FlamegraphNodeMeta) SetLine(v *v1alpha11.Line) {
	x.xxx_hidden_Line = v
}

func (x *FlamegraphNodeMeta) SetLocationIndex(v uint32) {
	x.xxx_hidden_LocationIndex = v
}

func (x *FlamegraphNodeMeta) SetLineIndex(v uint32) {
	x.xxx_hidden_LineIndex = v
}

func (x *FlamegraphNodeMeta) HasLocation() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Location != nil
}

func (x *FlamegraphNodeMeta) HasMapping() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Mapping != nil
}

func (x *FlamegraphNodeMeta) HasFunction() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Function != nil
}

func (x *FlamegraphNodeMeta) HasLine() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Line != nil
}

func (x *FlamegraphNodeMeta) ClearLocation() {
	x.xxx_hidden_Location = nil
}

func (x *FlamegraphNodeMeta) ClearMapping() {
	x.xxx_hidden_Mapping = nil
}

func (x *FlamegraphNodeMeta) ClearFunction() {
	x.xxx_hidden_Function = nil
}

func (x *FlamegraphNodeMeta) ClearLine() {
	x.xxx_hidden_Line = nil
}

type FlamegraphNodeMeta_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// location is the location for the code
	Location *v1alpha11.Location
	// mapping is the mapping into code
	Mapping *v1alpha11.Mapping
	// function is the function information
	Function *v1alpha11.Function
	// line is the line location
	Line *v1alpha11.Line
	// location_index has the index to the deduplicated location in the location table.
	LocationIndex uint32
	// line_index is the line index within the referenced location.
	LineIndex uint32
}

func (b0 FlamegraphNodeMeta_builder) Build() *FlamegraphNodeMeta {
	m0 := &FlamegraphNodeMeta{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Location = b.Location
	x.xxx_hidden_Mapping = b.Mapping
	x.xxx_hidden_Function = b.Function
	x.xxx_hidden_Line = b.Line
	x.xxx_hidden_LocationIndex = b.LocationIndex
	x.xxx_hidden_LineIndex = b.LineIndex
	return m0
}

// CallgraphNode represents a node in the graph
type CallgraphNode struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id         string                 `protobuf:"bytes,1,opt,name=id,proto3"`
	xxx_hidden_Meta       *CallgraphNodeMeta     `protobuf:"bytes,2,opt,name=meta,proto3"`
	xxx_hidden_Cumulative int64                  `protobuf:"varint,3,opt,name=cumulative,proto3"`
	xxx_hidden_Flat       int64                  `protobuf:"varint,4,opt,name=flat,proto3"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CallgraphNode) Reset() {
	*x = CallgraphNode{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallgraphNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallgraphNode) ProtoMessage() {}

func (x *CallgraphNode) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CallgraphNode) GetId() string {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return ""
}

func (x *CallgraphNode) GetMeta() *CallgraphNodeMeta {
	if x != nil {
		return x.xxx_hidden_Meta
	}
	return nil
}

func (x *CallgraphNode) GetCumulative() int64 {
	if x != nil {
		return x.xxx_hidden_Cumulative
	}
	return 0
}

func (x *CallgraphNode) GetFlat() int64 {
	if x != nil {
		return x.xxx_hidden_Flat
	}
	return 0
}

func (x *CallgraphNode) SetId(v string) {
	x.xxx_hidden_Id = v
}

func (x *CallgraphNode) SetMeta(v *CallgraphNodeMeta) {
	x.xxx_hidden_Meta = v
}

func (x *CallgraphNode) SetCumulative(v int64) {
	x.xxx_hidden_Cumulative = v
}

func (x *CallgraphNode) SetFlat(v int64) {
	x.xxx_hidden_Flat = v
}

func (x *CallgraphNode) HasMeta() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Meta != nil
}

func (x *CallgraphNode) ClearMeta() {
	x.xxx_hidden_Meta = nil
}

type CallgraphNode_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// id is the unique id of the node
	Id string
	// meta is the metadata about the node
	Meta *CallgraphNodeMeta
	// cumulative is the cumulative value of the node
	Cumulative int64
	// flat is the flat value of the node
	Flat int64
}

func (b0 CallgraphNode_builder) Build() *CallgraphNode {
	m0 := &CallgraphNode{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_Meta = b.Meta
	x.xxx_hidden_Cumulative = b.Cumulative
	x.xxx_hidden_Flat = b.Flat
	return m0
}

// TopNodeMeta is the metadata for a given node
type CallgraphNodeMeta struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Location *v1alpha11.Location    `protobuf:"bytes,1,opt,name=location,proto3"`
	xxx_hidden_Mapping  *v1alpha11.Mapping     `protobuf:"bytes,2,opt,name=mapping,proto3"`
	xxx_hidden_Function *v1alpha11.Function    `protobuf:"bytes,3,opt,name=function,proto3"`
	xxx_hidden_Line     *v1alpha11.Line        `protobuf:"bytes,4,opt,name=line,proto3"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CallgraphNodeMeta) Reset() {
	*x = CallgraphNodeMeta{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallgraphNodeMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallgraphNodeMeta) ProtoMessage() {}

func (x *CallgraphNodeMeta) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CallgraphNodeMeta) GetLocation() *v1alpha11.Location {
	if x != nil {
		return x.xxx_hidden_Location
	}
	return nil
}

func (x *CallgraphNodeMeta) GetMapping() *v1alpha11.Mapping {
	if x != nil {
		return x.xxx_hidden_Mapping
	}
	return nil
}

func (x *CallgraphNodeMeta) GetFunction() *v1alpha11.Function {
	if x != nil {
		return x.xxx_hidden_Function
	}
	return nil
}

func (x *CallgraphNodeMeta) GetLine() *v1alpha11.Line {
	if x != nil {
		return x.xxx_hidden_Line
	}
	return nil
}

func (x *CallgraphNodeMeta) SetLocation(v *v1alpha11.Location) {
	x.xxx_hidden_Location = v
}

func (x *CallgraphNodeMeta) SetMapping(v *v1alpha11.Mapping) {
	x.xxx_hidden_Mapping = v
}

func (x *CallgraphNodeMeta) SetFunction(v *v1alpha11.Function) {
	x.xxx_hidden_Function = v
}

func (x *CallgraphNodeMeta) SetLine(v *v1alpha11.Line) {
	x.xxx_hidden_Line = v
}

func (x *CallgraphNodeMeta) HasLocation() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Location != nil
}

func (x *CallgraphNodeMeta) HasMapping() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Mapping != nil
}

func (x *CallgraphNodeMeta) HasFunction() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Function != nil
}

func (x *CallgraphNodeMeta) HasLine() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Line != nil
}

func (x *CallgraphNodeMeta) ClearLocation() {
	x.xxx_hidden_Location = nil
}

func (x *CallgraphNodeMeta) ClearMapping() {
	x.xxx_hidden_Mapping = nil
}

func (x *CallgraphNodeMeta) ClearFunction() {
	x.xxx_hidden_Function = nil
}

func (x *CallgraphNodeMeta) ClearLine() {
	x.xxx_hidden_Line = nil
}

type CallgraphNodeMeta_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// location is the location for the code
	Location *v1alpha11.Location
	// mapping is the mapping into code
	Mapping *v1alpha11.Mapping
	// function is the function information
	Function *v1alpha11.Function
	// line is the line location
	Line *v1alpha11.Line
}

func (b0 CallgraphNodeMeta_builder) Build() *CallgraphNodeMeta {
	m0 := &CallgraphNodeMeta{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Location = b.Location
	x.xxx_hidden_Mapping = b.Mapping
	x.xxx_hidden_Function = b.Function
	x.xxx_hidden_Line = b.Line
	return m0
}

// CallgraphEdge represents an edge in the graph
type CallgraphEdge struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          string                 `protobuf:"bytes,1,opt,name=id,proto3"`
	xxx_hidden_Source      string                 `protobuf:"bytes,2,opt,name=source,proto3"`
	xxx_hidden_Target      string                 `protobuf:"bytes,3,opt,name=target,proto3"`
	xxx_hidden_Cumulative  int64                  `protobuf:"varint,4,opt,name=cumulative,proto3"`
	xxx_hidden_IsCollapsed bool                   `protobuf:"varint,5,opt,name=is_collapsed,json=isCollapsed,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CallgraphEdge) Reset() {
	*x = CallgraphEdge{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallgraphEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallgraphEdge) ProtoMessage() {}

func (x *CallgraphEdge) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CallgraphEdge) GetId() string {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return ""
}

func (x *CallgraphEdge) GetSource() string {
	if x != nil {
		return x.xxx_hidden_Source
	}
	return ""
}

func (x *CallgraphEdge) GetTarget() string {
	if x != nil {
		return x.xxx_hidden_Target
	}
	return ""
}

func (x *CallgraphEdge) GetCumulative() int64 {
	if x != nil {
		return x.xxx_hidden_Cumulative
	}
	return 0
}

func (x *CallgraphEdge) GetIsCollapsed() bool {
	if x != nil {
		return x.xxx_hidden_IsCollapsed
	}
	return false
}

func (x *CallgraphEdge) SetId(v string) {
	x.xxx_hidden_Id = v
}

func (x *CallgraphEdge) SetSource(v string) {
	x.xxx_hidden_Source = v
}

func (x *CallgraphEdge) SetTarget(v string) {
	x.xxx_hidden_Target = v
}

func (x *CallgraphEdge) SetCumulative(v int64) {
	x.xxx_hidden_Cumulative = v
}

func (x *CallgraphEdge) SetIsCollapsed(v bool) {
	x.xxx_hidden_IsCollapsed = v
}

type CallgraphEdge_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// id is the unique id of the edge
	Id string
	// source represents the id of the source node
	Source string
	// target represents the id of the target node
	Target string
	// cumulative is the cumulative value of the edge
	Cumulative int64
	// is_collapsed indicates if the edge is collapsed
	IsCollapsed bool
}

func (b0 CallgraphEdge_builder) Build() *CallgraphEdge {
	m0 := &CallgraphEdge{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_Source = b.Source
	x.xxx_hidden_Target = b.Target
	x.xxx_hidden_Cumulative = b.Cumulative
	x.xxx_hidden_IsCollapsed = b.IsCollapsed
	return m0
}

// Callgraph is the callgraph report type
type Callgraph struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Nodes      *[]*CallgraphNode      `protobuf:"bytes,1,rep,name=nodes,proto3"`
	xxx_hidden_Edges      *[]*CallgraphEdge      `protobuf:"bytes,2,rep,name=edges,proto3"`
	xxx_hidden_Cumulative int64                  `protobuf:"varint,3,opt,name=cumulative,proto3"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Callgraph) Reset() {
	*x = Callgraph{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Callgraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Callgraph) ProtoMessage() {}

func (x *Callgraph) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Callgraph) GetNodes() []*CallgraphNode {
	if x != nil {
		if x.xxx_hidden_Nodes != nil {
			return *x.xxx_hidden_Nodes
		}
	}
	return nil
}

func (x *Callgraph) GetEdges() []*CallgraphEdge {
	if x != nil {
		if x.xxx_hidden_Edges != nil {
			return *x.xxx_hidden_Edges
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in parca/query/v1alpha1/query.proto.
func (x *Callgraph) GetCumulative() int64 {
	if x != nil {
		return x.xxx_hidden_Cumulative
	}
	return 0
}

func (x *Callgraph) SetNodes(v []*CallgraphNode) {
	x.xxx_hidden_Nodes = &v
}

func (x *Callgraph) SetEdges(v []*CallgraphEdge) {
	x.xxx_hidden_Edges = &v
}

// Deprecated: Marked as deprecated in parca/query/v1alpha1/query.proto.
func (x *Callgraph) SetCumulative(v int64) {
	x.xxx_hidden_Cumulative = v
}

type Callgraph_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// nodes are the nodes in the callgraph
	Nodes []*CallgraphNode
	// edges are the edges connecting nodes in the callgraph
	Edges []*CallgraphEdge
	// cumulative is the total cumulative value of the callgraph
	// Use total from the top level query response instead.
	//
	// Deprecated: Marked as deprecated in parca/query/v1alpha1/query.proto.
	Cumulative int64
}

func (b0 Callgraph_builder) Build() *Callgraph {
	m0 := &Callgraph{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Nodes = &b.Nodes
	x.xxx_hidden_Edges = &b.Edges
	x.xxx_hidden_Cumulative = b.Cumulative
	return m0
}

// QueryResponse is the returned report for the given query
type QueryResponse struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Report   isQueryResponse_Report `protobuf_oneof:"report"`
	xxx_hidden_Total    int64                  `protobuf:"varint,9,opt,name=total,proto3"`
	xxx_hidden_Filtered int64                  `protobuf:"varint,10,opt,name=filtered,proto3"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *QueryResponse) GetFlamegraph() *Flamegraph {
	if x != nil {
		if x, ok := x.xxx_hidden_Report.(*queryResponse_Flamegraph); ok {
			return x.Flamegraph
		}
	}
	return nil
}

func (x *QueryResponse) GetPprof() []byte {
	if x != nil {
		if x, ok := x.xxx_hidden_Report.(*queryResponse_Pprof); ok {
			return x.Pprof
		}
	}
	return nil
}

func (x *QueryResponse) GetTop() *Top {
	if x != nil {
		if x, ok := x.xxx_hidden_Report.(*queryResponse_Top); ok {
			return x.Top
		}
	}
	return nil
}

func (x *QueryResponse) GetCallgraph() *Callgraph {
	if x != nil {
		if x, ok := x.xxx_hidden_Report.(*queryResponse_Callgraph); ok {
			return x.Callgraph
		}
	}
	return nil
}

func (x *QueryResponse) GetFlamegraphArrow() *FlamegraphArrow {
	if x != nil {
		if x, ok := x.xxx_hidden_Report.(*queryResponse_FlamegraphArrow); ok {
			return x.FlamegraphArrow
		}
	}
	return nil
}

func (x *QueryResponse) GetSource() *Source {
	if x != nil {
		if x, ok := x.xxx_hidden_Report.(*queryResponse_Source); ok {
			return x.Source
		}
	}
	return nil
}

func (x *QueryResponse) GetTableArrow() *TableArrow {
	if x != nil {
		if x, ok := x.xxx_hidden_Report.(*queryResponse_TableArrow); ok {
			return x.TableArrow
		}
	}
	return nil
}

func (x *QueryResponse) GetProfileMetadata() *ProfileMetadata {
	if x != nil {
		if x, ok := x.xxx_hidden_Report.(*queryResponse_ProfileMetadata); ok {
			return x.ProfileMetadata
		}
	}
	return nil
}

func (x *QueryResponse) GetTotal() int64 {
	if x != nil {
		return x.xxx_hidden_Total
	}
	return 0
}

func (x *QueryResponse) GetFiltered() int64 {
	if x != nil {
		return x.xxx_hidden_Filtered
	}
	return 0
}

func (x *QueryResponse) SetFlamegraph(v *Flamegraph) {
	if v == nil {
		x.xxx_hidden_Report = nil
		return
	}
	x.xxx_hidden_Report = &queryResponse_Flamegraph{v}
}

func (x *QueryResponse) SetPprof(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Report = &queryResponse_Pprof{v}
}

func (x *QueryResponse) SetTop(v *Top) {
	if v == nil {
		x.xxx_hidden_Report = nil
		return
	}
	x.xxx_hidden_Report = &queryResponse_Top{v}
}

func (x *QueryResponse) SetCallgraph(v *Callgraph) {
	if v == nil {
		x.xxx_hidden_Report = nil
		return
	}
	x.xxx_hidden_Report = &queryResponse_Callgraph{v}
}

func (x *QueryResponse) SetFlamegraphArrow(v *FlamegraphArrow) {
	if v == nil {
		x.xxx_hidden_Report = nil
		return
	}
	x.xxx_hidden_Report = &queryResponse_FlamegraphArrow{v}
}

func (x *QueryResponse) SetSource(v *Source) {
	if v == nil {
		x.xxx_hidden_Report = nil
		return
	}
	x.xxx_hidden_Report = &queryResponse_Source{v}
}

func (x *QueryResponse) SetTableArrow(v *TableArrow) {
	if v == nil {
		x.xxx_hidden_Report = nil
		return
	}
	x.xxx_hidden_Report = &queryResponse_TableArrow{v}
}

func (x *QueryResponse) SetProfileMetadata(v *ProfileMetadata) {
	if v == nil {
		x.xxx_hidden_Report = nil
		return
	}
	x.xxx_hidden_Report = &queryResponse_ProfileMetadata{v}
}

func (x *QueryResponse) SetTotal(v int64) {
	x.xxx_hidden_Total = v
}

func (x *QueryResponse) SetFiltered(v int64) {
	x.xxx_hidden_Filtered = v
}

func (x *QueryResponse) HasReport() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Report != nil
}

func (x *QueryResponse) HasFlamegraph() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Report.(*queryResponse_Flamegraph)
	return ok
}

func (x *QueryResponse) HasPprof() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Report.(*queryResponse_Pprof)
	return ok
}

func (x *QueryResponse) HasTop() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Report.(*queryResponse_Top)
	return ok
}

func (x *QueryResponse) HasCallgraph() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Report.(*queryResponse_Callgraph)
	return ok
}

func (x *QueryResponse) HasFlamegraphArrow() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Report.(*queryResponse_FlamegraphArrow)
	return ok
}

func (x *QueryResponse) HasSource() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Report.(*queryResponse_Source)
	return ok
}

func (x *QueryResponse) HasTableArrow() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Report.(*queryResponse_TableArrow)
	return ok
}

func (x *QueryResponse) HasProfileMetadata() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Report.(*queryResponse_ProfileMetadata)
	return ok
}

func (x *QueryResponse) ClearReport() {
	x.xxx_hidden_Report = nil
}

func (x *QueryResponse) ClearFlamegraph() {
	if _, ok := x.xxx_hidden_Report.(*queryResponse_Flamegraph); ok {
		x.xxx_hidden_Report = nil
	}
}

func (x *QueryResponse) ClearPprof() {
	if _, ok := x.xxx_hidden_Report.(*queryResponse_Pprof); ok {
		x.xxx_hidden_Report = nil
	}
}

func (x *QueryResponse) ClearTop() {
	if _, ok := x.xxx_hidden_Report.(*queryResponse_Top); ok {
		x.xxx_hidden_Report = nil
	}
}

func (x *QueryResponse) ClearCallgraph() {
	if _, ok := x.xxx_hidden_Report.(*queryResponse_Callgraph); ok {
		x.xxx_hidden_Report = nil
	}
}

func (x *QueryResponse) ClearFlamegraphArrow() {
	if _, ok := x.xxx_hidden_Report.(*queryResponse_FlamegraphArrow); ok {
		x.xxx_hidden_Report = nil
	}
}

func (x *QueryResponse) ClearSource() {
	if _, ok := x.xxx_hidden_Report.(*queryResponse_Source); ok {
		x.xxx_hidden_Report = nil
	}
}

func (x *QueryResponse) ClearTableArrow() {
	if _, ok := x.xxx_hidden_Report.(*queryResponse_TableArrow); ok {
		x.xxx_hidden_Report = nil
	}
}

func (x *QueryResponse) ClearProfileMetadata() {
	if _, ok := x.xxx_hidden_Report.(*queryResponse_ProfileMetadata); ok {
		x.xxx_hidden_Report = nil
	}
}

const QueryResponse_Report_not_set_case case_QueryResponse_Report = 0
const QueryResponse_Flamegraph_case case_QueryResponse_Report = 5
const QueryResponse_Pprof_case case_QueryResponse_Report = 6
const QueryResponse_Top_case case_QueryResponse_Report = 7
const QueryResponse_Callgraph_case case_QueryResponse_Report = 8
const QueryResponse_FlamegraphArrow_case case_QueryResponse_Report = 11
const QueryResponse_Source_case case_QueryResponse_Report = 12
const QueryResponse_TableArrow_case case_QueryResponse_Report = 13
const QueryResponse_ProfileMetadata_case case_QueryResponse_Report = 14

func (x *QueryResponse) WhichReport() case_QueryResponse_Report {
	if x == nil {
		return QueryResponse_Report_not_set_case
	}
	switch x.xxx_hidden_Report.(type) {
	case *queryResponse_Flamegraph:
		return QueryResponse_Flamegraph_case
	case *queryResponse_Pprof:
		return QueryResponse_Pprof_case
	case *queryResponse_Top:
		return QueryResponse_Top_case
	case *queryResponse_Callgraph:
		return QueryResponse_Callgraph_case
	case *queryResponse_FlamegraphArrow:
		return QueryResponse_FlamegraphArrow_case
	case *queryResponse_Source:
		return QueryResponse_Source_case
	case *queryResponse_TableArrow:
		return QueryResponse_TableArrow_case
	case *queryResponse_ProfileMetadata:
		return QueryResponse_ProfileMetadata_case
	default:
		return QueryResponse_Report_not_set_case
	}
}

type QueryResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// report is the generated report

	// Fields of oneof xxx_hidden_Report:
	// flamegraph is a flamegraph representation of the report
	Flamegraph *Flamegraph
	// pprof is a pprof profile as compressed bytes
	Pprof []byte
	// top is a top list representation of the report
	Top *Top
	// callgraph is a callgraph nodes and edges representation of the report
	Callgraph *Callgraph
	// flamegraph_arrow is a flamegraph encoded as a arrow record
	FlamegraphArrow *FlamegraphArrow
	// source is the source report type result
	Source *Source
	// table_arrow is a table encoded as a arrow record
	TableArrow *TableArrow
	// profile_metadata contains metadata about the profile i.e. binaries, labels
	ProfileMetadata *ProfileMetadata
	// -- end of xxx_hidden_Report
	// total is the total number of samples shown in the report.
	Total int64
	// filtered is the number of samples filtered out of the report.
	Filtered int64
}

func (b0 QueryResponse_builder) Build() *QueryResponse {
	m0 := &QueryResponse{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Flamegraph != nil {
		x.xxx_hidden_Report = &queryResponse_Flamegraph{b.Flamegraph}
	}
	if b.Pprof != nil {
		x.xxx_hidden_Report = &queryResponse_Pprof{b.Pprof}
	}
	if b.Top != nil {
		x.xxx_hidden_Report = &queryResponse_Top{b.Top}
	}
	if b.Callgraph != nil {
		x.xxx_hidden_Report = &queryResponse_Callgraph{b.Callgraph}
	}
	if b.FlamegraphArrow != nil {
		x.xxx_hidden_Report = &queryResponse_FlamegraphArrow{b.FlamegraphArrow}
	}
	if b.Source != nil {
		x.xxx_hidden_Report = &queryResponse_Source{b.Source}
	}
	if b.TableArrow != nil {
		x.xxx_hidden_Report = &queryResponse_TableArrow{b.TableArrow}
	}
	if b.ProfileMetadata != nil {
		x.xxx_hidden_Report = &queryResponse_ProfileMetadata{b.ProfileMetadata}
	}
	x.xxx_hidden_Total = b.Total
	x.xxx_hidden_Filtered = b.Filtered
	return m0
}

type case_QueryResponse_Report protoreflect.FieldNumber

func (x case_QueryResponse_Report) String() string {
	md := file_parca_query_v1alpha1_query_proto_msgTypes[33].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isQueryResponse_Report interface {
	isQueryResponse_Report()
}

type queryResponse_Flamegraph struct {
	// flamegraph is a flamegraph representation of the report
	Flamegraph *Flamegraph `protobuf:"bytes,5,opt,name=flamegraph,proto3,oneof"`
}

type queryResponse_Pprof struct {
	// pprof is a pprof profile as compressed bytes
	Pprof []byte `protobuf:"bytes,6,opt,name=pprof,proto3,oneof"`
}

type queryResponse_Top struct {
	// top is a top list representation of the report
	Top *Top `protobuf:"bytes,7,opt,name=top,proto3,oneof"`
}

type queryResponse_Callgraph struct {
	// callgraph is a callgraph nodes and edges representation of the report
	Callgraph *Callgraph `protobuf:"bytes,8,opt,name=callgraph,proto3,oneof"`
}

type queryResponse_FlamegraphArrow struct {
	// flamegraph_arrow is a flamegraph encoded as a arrow record
	FlamegraphArrow *FlamegraphArrow `protobuf:"bytes,11,opt,name=flamegraph_arrow,json=flamegraphArrow,proto3,oneof"`
}

type queryResponse_Source struct {
	// source is the source report type result
	Source *Source `protobuf:"bytes,12,opt,name=source,proto3,oneof"`
}

type queryResponse_TableArrow struct {
	// table_arrow is a table encoded as a arrow record
	TableArrow *TableArrow `protobuf:"bytes,13,opt,name=table_arrow,json=tableArrow,proto3,oneof"`
}

type queryResponse_ProfileMetadata struct {
	// profile_metadata contains metadata about the profile i.e. binaries, labels
	ProfileMetadata *ProfileMetadata `protobuf:"bytes,14,opt,name=profile_metadata,json=profileMetadata,proto3,oneof"`
}

func (*queryResponse_Flamegraph) isQueryResponse_Report() {}

func (*queryResponse_Pprof) isQueryResponse_Report() {}

func (*queryResponse_Top) isQueryResponse_Report() {}

func (*queryResponse_Callgraph) isQueryResponse_Report() {}

func (*queryResponse_FlamegraphArrow) isQueryResponse_Report() {}

func (*queryResponse_Source) isQueryResponse_Report() {}

func (*queryResponse_TableArrow) isQueryResponse_Report() {}

func (*queryResponse_ProfileMetadata) isQueryResponse_Report() {}

// SeriesRequest is unimplemented
type SeriesRequest struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Match []string               `protobuf:"bytes,1,rep,name=match,proto3"`
	xxx_hidden_Start *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start,proto3"`
	xxx_hidden_End   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end,proto3"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SeriesRequest) Reset() {
	*x = SeriesRequest{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeriesRequest) ProtoMessage() {}

func (x *SeriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SeriesRequest) GetMatch() []string {
	if x != nil {
		return x.xxx_hidden_Match
	}
	return nil
}

func (x *SeriesRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Start
	}
	return nil
}

func (x *SeriesRequest) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_End
	}
	return nil
}

func (x *SeriesRequest) SetMatch(v []string) {
	x.xxx_hidden_Match = v
}

func (x *SeriesRequest) SetStart(v *timestamppb.Timestamp) {
	x.xxx_hidden_Start = v
}

func (x *SeriesRequest) SetEnd(v *timestamppb.Timestamp) {
	x.xxx_hidden_End = v
}

func (x *SeriesRequest) HasStart() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Start != nil
}

func (x *SeriesRequest) HasEnd() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_End != nil
}

func (x *SeriesRequest) ClearStart() {
	x.xxx_hidden_Start = nil
}

func (x *SeriesRequest) ClearEnd() {
	x.xxx_hidden_End = nil
}

type SeriesRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// match ...
	Match []string
	// start ...
	Start *timestamppb.Timestamp
	// end ...
	End *timestamppb.Timestamp
}

func (b0 SeriesRequest_builder) Build() *SeriesRequest {
	m0 := &SeriesRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Match = b.Match
	x.xxx_hidden_Start = b.Start
	x.xxx_hidden_End = b.End
	return m0
}

// SeriesResponse is unimplemented
type SeriesResponse struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SeriesResponse) Reset() {
	*x = SeriesResponse{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeriesResponse) ProtoMessage() {}

func (x *SeriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type SeriesResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 SeriesResponse_builder) Build() *SeriesResponse {
	m0 := &SeriesResponse{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// LabelsRequest are the request values for labels
type LabelsRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Match       []string               `protobuf:"bytes,1,rep,name=match,proto3"`
	xxx_hidden_Start       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start,proto3"`
	xxx_hidden_End         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end,proto3"`
	xxx_hidden_ProfileType *string                `protobuf:"bytes,4,opt,name=profile_type,json=profileType,proto3,oneof"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *LabelsRequest) Reset() {
	*x = LabelsRequest{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelsRequest) ProtoMessage() {}

func (x *LabelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LabelsRequest) GetMatch() []string {
	if x != nil {
		return x.xxx_hidden_Match
	}
	return nil
}

func (x *LabelsRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Start
	}
	return nil
}

func (x *LabelsRequest) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_End
	}
	return nil
}

func (x *LabelsRequest) GetProfileType() string {
	if x != nil {
		if x.xxx_hidden_ProfileType != nil {
			return *x.xxx_hidden_ProfileType
		}
		return ""
	}
	return ""
}

func (x *LabelsRequest) SetMatch(v []string) {
	x.xxx_hidden_Match = v
}

func (x *LabelsRequest) SetStart(v *timestamppb.Timestamp) {
	x.xxx_hidden_Start = v
}

func (x *LabelsRequest) SetEnd(v *timestamppb.Timestamp) {
	x.xxx_hidden_End = v
}

func (x *LabelsRequest) SetProfileType(v string) {
	x.xxx_hidden_ProfileType = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *LabelsRequest) HasStart() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Start != nil
}

func (x *LabelsRequest) HasEnd() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_End != nil
}

func (x *LabelsRequest) HasProfileType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *LabelsRequest) ClearStart() {
	x.xxx_hidden_Start = nil
}

func (x *LabelsRequest) ClearEnd() {
	x.xxx_hidden_End = nil
}

func (x *LabelsRequest) ClearProfileType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_ProfileType = nil
}

type LabelsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// match are the set of matching strings
	Match []string
	// start is the start of the time window to perform the query
	Start *timestamppb.Timestamp
	// end is the end of the time window to perform the query
	End *timestamppb.Timestamp
	// profile_type is the type of profile to filter by
	ProfileType *string
}

func (b0 LabelsRequest_builder) Build() *LabelsRequest {
	m0 := &LabelsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Match = b.Match
	x.xxx_hidden_Start = b.Start
	x.xxx_hidden_End = b.End
	if b.ProfileType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_ProfileType = b.ProfileType
	}
	return m0
}

// LabelsResponse is the set of matching label names
type LabelsResponse struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_LabelNames []string               `protobuf:"bytes,1,rep,name=label_names,json=labelNames,proto3"`
	xxx_hidden_Warnings   []string               `protobuf:"bytes,2,rep,name=warnings,proto3"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *LabelsResponse) Reset() {
	*x = LabelsResponse{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelsResponse) ProtoMessage() {}

func (x *LabelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LabelsResponse) GetLabelNames() []string {
	if x != nil {
		return x.xxx_hidden_LabelNames
	}
	return nil
}

func (x *LabelsResponse) GetWarnings() []string {
	if x != nil {
		return x.xxx_hidden_Warnings
	}
	return nil
}

func (x *LabelsResponse) SetLabelNames(v []string) {
	x.xxx_hidden_LabelNames = v
}

func (x *LabelsResponse) SetWarnings(v []string) {
	x.xxx_hidden_Warnings = v
}

type LabelsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// / label_names are the set of matching label names
	LabelNames []string
	// warnings is unimplemented
	Warnings []string
}

func (b0 LabelsResponse_builder) Build() *LabelsResponse {
	m0 := &LabelsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_LabelNames = b.LabelNames
	x.xxx_hidden_Warnings = b.Warnings
	return m0
}

// ValuesRequest are the request values for a values request
type ValuesRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_LabelName   string                 `protobuf:"bytes,1,opt,name=label_name,json=labelName,proto3"`
	xxx_hidden_Match       []string               `protobuf:"bytes,2,rep,name=match,proto3"`
	xxx_hidden_Start       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start,proto3"`
	xxx_hidden_End         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end,proto3"`
	xxx_hidden_ProfileType *string                `protobuf:"bytes,5,opt,name=profile_type,json=profileType,proto3,oneof"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ValuesRequest) Reset() {
	*x = ValuesRequest{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValuesRequest) ProtoMessage() {}

func (x *ValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ValuesRequest) GetLabelName() string {
	if x != nil {
		return x.xxx_hidden_LabelName
	}
	return ""
}

func (x *ValuesRequest) GetMatch() []string {
	if x != nil {
		return x.xxx_hidden_Match
	}
	return nil
}

func (x *ValuesRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Start
	}
	return nil
}

func (x *ValuesRequest) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_End
	}
	return nil
}

func (x *ValuesRequest) GetProfileType() string {
	if x != nil {
		if x.xxx_hidden_ProfileType != nil {
			return *x.xxx_hidden_ProfileType
		}
		return ""
	}
	return ""
}

func (x *ValuesRequest) SetLabelName(v string) {
	x.xxx_hidden_LabelName = v
}

func (x *ValuesRequest) SetMatch(v []string) {
	x.xxx_hidden_Match = v
}

func (x *ValuesRequest) SetStart(v *timestamppb.Timestamp) {
	x.xxx_hidden_Start = v
}

func (x *ValuesRequest) SetEnd(v *timestamppb.Timestamp) {
	x.xxx_hidden_End = v
}

func (x *ValuesRequest) SetProfileType(v string) {
	x.xxx_hidden_ProfileType = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 5)
}

func (x *ValuesRequest) HasStart() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Start != nil
}

func (x *ValuesRequest) HasEnd() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_End != nil
}

func (x *ValuesRequest) HasProfileType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *ValuesRequest) ClearStart() {
	x.xxx_hidden_Start = nil
}

func (x *ValuesRequest) ClearEnd() {
	x.xxx_hidden_End = nil
}

func (x *ValuesRequest) ClearProfileType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_ProfileType = nil
}

type ValuesRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// label_name is the label name to match values against
	LabelName string
	// match are the set of matching strings to match values against
	Match []string
	// start is the start of the time window to perform the query
	Start *timestamppb.Timestamp
	// end is the end of the time window to perform the query
	End *timestamppb.Timestamp
	// profile_type is the type of profile to filter by
	ProfileType *string
}

func (b0 ValuesRequest_builder) Build() *ValuesRequest {
	m0 := &ValuesRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_LabelName = b.LabelName
	x.xxx_hidden_Match = b.Match
	x.xxx_hidden_Start = b.Start
	x.xxx_hidden_End = b.End
	if b.ProfileType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 5)
		x.xxx_hidden_ProfileType = b.ProfileType
	}
	return m0
}

// ValuesResponse are the set of matching values
type ValuesResponse struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_LabelValues []string               `protobuf:"bytes,1,rep,name=label_values,json=labelValues,proto3"`
	xxx_hidden_Warnings    []string               `protobuf:"bytes,2,rep,name=warnings,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ValuesResponse) Reset() {
	*x = ValuesResponse{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValuesResponse) ProtoMessage() {}

func (x *ValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ValuesResponse) GetLabelValues() []string {
	if x != nil {
		return x.xxx_hidden_LabelValues
	}
	return nil
}

func (x *ValuesResponse) GetWarnings() []string {
	if x != nil {
		return x.xxx_hidden_Warnings
	}
	return nil
}

func (x *ValuesResponse) SetLabelValues(v []string) {
	x.xxx_hidden_LabelValues = v
}

func (x *ValuesResponse) SetWarnings(v []string) {
	x.xxx_hidden_Warnings = v
}

type ValuesResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// label_values are the set of matching label values
	LabelValues []string
	// warnings is unimplemented
	Warnings []string
}

func (b0 ValuesResponse_builder) Build() *ValuesResponse {
	m0 := &ValuesResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_LabelValues = b.LabelValues
	x.xxx_hidden_Warnings = b.Warnings
	return m0
}

// ValueType represents a value, including its type and unit
type ValueType struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Type string                 `protobuf:"bytes,1,opt,name=type,proto3"`
	xxx_hidden_Unit string                 `protobuf:"bytes,2,opt,name=unit,proto3"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ValueType) Reset() {
	*x = ValueType{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValueType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueType) ProtoMessage() {}

func (x *ValueType) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ValueType) GetType() string {
	if x != nil {
		return x.xxx_hidden_Type
	}
	return ""
}

func (x *ValueType) GetUnit() string {
	if x != nil {
		return x.xxx_hidden_Unit
	}
	return ""
}

func (x *ValueType) SetType(v string) {
	x.xxx_hidden_Type = v
}

func (x *ValueType) SetUnit(v string) {
	x.xxx_hidden_Unit = v
}

type ValueType_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// type is the type of the value
	Type string
	// unit is the unit of the value
	Unit string
}

func (b0 ValueType_builder) Build() *ValueType {
	m0 := &ValueType{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Type = b.Type
	x.xxx_hidden_Unit = b.Unit
	return m0
}

// ShareProfileRequest represents the query denoting the profile and a description about the profile
type ShareProfileRequest struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_QueryRequest *QueryRequest          `protobuf:"bytes,1,opt,name=query_request,json=queryRequest,proto3"`
	xxx_hidden_Description  *string                `protobuf:"bytes,2,opt,name=description,proto3,oneof"`
	XXX_raceDetectHookData  protoimpl.RaceDetectHookData
	XXX_presence            [1]uint32
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ShareProfileRequest) Reset() {
	*x = ShareProfileRequest{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShareProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareProfileRequest) ProtoMessage() {}

func (x *ShareProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ShareProfileRequest) GetQueryRequest() *QueryRequest {
	if x != nil {
		return x.xxx_hidden_QueryRequest
	}
	return nil
}

func (x *ShareProfileRequest) GetDescription() string {
	if x != nil {
		if x.xxx_hidden_Description != nil {
			return *x.xxx_hidden_Description
		}
		return ""
	}
	return ""
}

func (x *ShareProfileRequest) SetQueryRequest(v *QueryRequest) {
	x.xxx_hidden_QueryRequest = v
}

func (x *ShareProfileRequest) SetDescription(v string) {
	x.xxx_hidden_Description = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *ShareProfileRequest) HasQueryRequest() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_QueryRequest != nil
}

func (x *ShareProfileRequest) HasDescription() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ShareProfileRequest) ClearQueryRequest() {
	x.xxx_hidden_QueryRequest = nil
}

func (x *ShareProfileRequest) ClearDescription() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Description = nil
}

type ShareProfileRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// QueryRequest that refers to the profile to be shared
	QueryRequest *QueryRequest
	// description about the profile
	Description *string
}

func (b0 ShareProfileRequest_builder) Build() *ShareProfileRequest {
	m0 := &ShareProfileRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_QueryRequest = b.QueryRequest
	if b.Description != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Description = b.Description
	}
	return m0
}

// ShareProfileResponse represents the shared link of a profile
type ShareProfileResponse struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Link string                 `protobuf:"bytes,1,opt,name=link,proto3"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ShareProfileResponse) Reset() {
	*x = ShareProfileResponse{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShareProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareProfileResponse) ProtoMessage() {}

func (x *ShareProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ShareProfileResponse) GetLink() string {
	if x != nil {
		return x.xxx_hidden_Link
	}
	return ""
}

func (x *ShareProfileResponse) SetLink(v string) {
	x.xxx_hidden_Link = v
}

type ShareProfileResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// link to access the profile
	Link string
}

func (b0 ShareProfileResponse_builder) Build() *ShareProfileResponse {
	m0 := &ShareProfileResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Link = b.Link
	return m0
}

// TableArrow has the table encoded as a arrow record
type TableArrow struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Record []byte                 `protobuf:"bytes,1,opt,name=record,proto3"`
	xxx_hidden_Unit   string                 `protobuf:"bytes,2,opt,name=unit,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TableArrow) Reset() {
	*x = TableArrow{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableArrow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableArrow) ProtoMessage() {}

func (x *TableArrow) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TableArrow) GetRecord() []byte {
	if x != nil {
		return x.xxx_hidden_Record
	}
	return nil
}

func (x *TableArrow) GetUnit() string {
	if x != nil {
		return x.xxx_hidden_Unit
	}
	return ""
}

func (x *TableArrow) SetRecord(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Record = v
}

func (x *TableArrow) SetUnit(v string) {
	x.xxx_hidden_Unit = v
}

type TableArrow_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// record is the arrow record containing the actual table data
	Record []byte
	// unit is the unit represented by the flame graph
	Unit string
}

func (b0 TableArrow_builder) Build() *TableArrow {
	m0 := &TableArrow{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Record = b.Record
	x.xxx_hidden_Unit = b.Unit
	return m0
}

// ProfileMetadata contains metadata about the profile i.e. binaries, labels
type ProfileMetadata struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_MappingFiles []string               `protobuf:"bytes,1,rep,name=mapping_files,json=mappingFiles,proto3"`
	xxx_hidden_Labels       []string               `protobuf:"bytes,2,rep,name=labels,proto3"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ProfileMetadata) Reset() {
	*x = ProfileMetadata{}
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileMetadata) ProtoMessage() {}

func (x *ProfileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_parca_query_v1alpha1_query_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProfileMetadata) GetMappingFiles() []string {
	if x != nil {
		return x.xxx_hidden_MappingFiles
	}
	return nil
}

func (x *ProfileMetadata) GetLabels() []string {
	if x != nil {
		return x.xxx_hidden_Labels
	}
	return nil
}

func (x *ProfileMetadata) SetMappingFiles(v []string) {
	x.xxx_hidden_MappingFiles = v
}

func (x *ProfileMetadata) SetLabels(v []string) {
	x.xxx_hidden_Labels = v
}

type ProfileMetadata_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// mapping_files is the list of binaries in the profile
	MappingFiles []string
	// labels is the list of labels in the profile
	Labels []string
}

func (b0 ProfileMetadata_builder) Build() *ProfileMetadata {
	m0 := &ProfileMetadata{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_MappingFiles = b.MappingFiles
	x.xxx_hidden_Labels = b.Labels
	return m0
}

var File_parca_query_v1alpha1_query_proto protoreflect.FileDescriptor

var file_parca_query_v1alpha1_query_proto_rawDesc = string([]byte{
	0x0a, 0x20, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x14, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x15, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x0b, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x22, 0xe5, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03,
	0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x75, 0x6d, 0x5f,
	0x62, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x75, 0x6d, 0x42, 0x79, 0x22,
	0x51, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x22, 0x95, 0x02, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x52, 0x08, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x07, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x61,
	0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x0d, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x55, 0x0a, 0x0d, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x22, 0xaf, 0x01, 0x0a, 0x0b, 0x44, 0x69, 0x66, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x38, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x61,
	0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x01, 0x61, 0x12, 0x38, 0x0a, 0x01, 0x62, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x01, 0x62, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x69,
	0x66, 0x66, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x70, 0x61, 0x72, 0x63,
	0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x05, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x06,
	0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x22, 0x33, 0x0a, 0x04, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47,
	0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x10, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xfe, 0x09, 0x0a, 0x0c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x61, 0x72,
	0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x69, 0x66,
	0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44,
	0x69, 0x66, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x69,
	0x66, 0x66, 0x12, 0x3a, 0x0a, 0x05, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x3d,
	0x0a, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x4e, 0x0a,
	0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a,
	0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x48, 0x01, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x74, 0x72, 0x69, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x72,
	0x69, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x48,
	0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a,
	0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x04,
	0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x42, 0x02, 0x18, 0x01, 0x48, 0x05, 0x52, 0x0d, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x69, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x61, 0x72,
	0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0x42, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49,
	0x46, 0x46, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x45, 0x52,
	0x47, 0x45, 0x10, 0x02, 0x22, 0xb6, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x22, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x4d, 0x45, 0x47, 0x52, 0x41, 0x50, 0x48, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x50, 0x52, 0x4f, 0x46, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x52,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x47,
	0x52, 0x41, 0x50, 0x48, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x4d, 0x45, 0x47, 0x52, 0x41, 0x50, 0x48,
	0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x4d, 0x45, 0x47, 0x52, 0x41,
	0x50, 0x48, 0x5f, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x10, 0x07, 0x12,
	0x20, 0x0a, 0x1c, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10,
	0x08, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x4c, 0x41, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x52, 0x54, 0x10, 0x09, 0x42, 0x09, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x22, 0xa2, 0x01, 0x0a,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x46, 0x0a, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x22, 0x85, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x6c, 0x0a, 0x1a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x17, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42,
	0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x47, 0x0a, 0x17, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0x72, 0x0a, 0x0b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x59, 0x0a, 0x13, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x3e, 0x0a, 0x11, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73,
	0x68, 0x6f, 0x77, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x72, 0x75, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x68,
	0x6f, 0x77, 0x52, 0x75, 0x62, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x65, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x69, 0x0a, 0x0f, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x21, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x03, 0x54, 0x6f, 0x70,
	0x12, 0x31, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x88, 0x01,
	0x0a, 0x07, 0x54, 0x6f, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54,
	0x6f, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x66, 0x6c, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x66, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x64, 0x69, 0x66, 0x66, 0x22, 0xfe, 0x01, 0x0a, 0x0b, 0x54, 0x6f, 0x70,
	0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61, 0x72,
	0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x61, 0x72, 0x63,
	0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c,
	0x69, 0x6e, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xb9, 0x03, 0x0a, 0x0a, 0x46, 0x6c,
	0x61, 0x6d, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x3c, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x6c,
	0x61, 0x6d, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x40, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3b, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x3e,
	0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x0f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x75, 0x6e, 0x74,
	0x72, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x72, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x72,
	0x69, 0x6d, 0x6d, 0x65, 0x64, 0x22, 0x6f, 0x0a, 0x0f, 0x46, 0x6c, 0x61, 0x6d, 0x65, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x72, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74,
	0x72, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x22, 0x4c, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x12, 0x46, 0x6c, 0x61, 0x6d, 0x65, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x52, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x69, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x69, 0x66, 0x66, 0x12,
	0x40, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x6d, 0x65, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x22, 0xc4, 0x01, 0x0a, 0x0e, 0x46, 0x6c, 0x61, 0x6d, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x6d, 0x65, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x66, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x64, 0x69, 0x66, 0x66, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x46, 0x6c, 0x61, 0x6d, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0xcb, 0x02, 0x0a, 0x12, 0x46, 0x6c, 0x61,
	0x6d, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x3e, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x61, 0x72,
	0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x90, 0x01, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x6c, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x74, 0x22, 0x84, 0x02, 0x0a, 0x11, 0x43, 0x61,
	0x6c, 0x6c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x3e, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x61, 0x72,
	0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65,
	0x22, 0x92, 0x01, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x6c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x45, 0x64,
	0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x70, 0x73, 0x65, 0x64, 0x22, 0xa5, 0x01, 0x0a, 0x09, 0x43, 0x61, 0x6c, 0x6c, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x12, 0x39, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x39,
	0x0a, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x45, 0x64,
	0x67, 0x65, 0x52, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x0a, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x22, 0xbc, 0x04,
	0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x6d, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x6d, 0x65,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x6d, 0x65, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x12, 0x16, 0x0a, 0x05, 0x70, 0x70, 0x72, 0x6f, 0x66, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x70, 0x70, 0x72, 0x6f, 0x66, 0x12, 0x2d, 0x0a, 0x03, 0x74,
	0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x54, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x61,
	0x6c, 0x6c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x48, 0x00,
	0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x52, 0x0a, 0x10, 0x66,
	0x6c, 0x61, 0x6d, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x6c, 0x61,
	0x6d, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x0f,
	0x66, 0x6c, 0x61, 0x6d, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x12,
	0x36, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x48, 0x00,
	0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x12, 0x52, 0x0a, 0x10,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x85, 0x01, 0x0a,
	0x0d, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x0d, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x30,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x26,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4d, 0x0a, 0x0e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x30, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x26, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4f, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x33, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x95, 0x01, 0x0a,
	0x13, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61,
	0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x14, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b,
	0x22, 0x38, 0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x4e, 0x0a, 0x0f, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0xdf, 0x06, 0x0a, 0x0c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7e, 0x0a, 0x0a, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x27, 0x2e, 0x70, 0x61, 0x72, 0x63,
	0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x69, 0x0a, 0x05, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x22, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x6d, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x23, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x7e, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x6d, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x23, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x12, 0x12, 0x10, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x23, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x26, 0x12, 0x24, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x0c, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x29, 0x2e, 0x70, 0x61, 0x72, 0x63,
	0x61, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x42, 0x58, 0x5a, 0x56,
	0x62, 0x75, 0x66, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f,
	0x2f, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x70, 0x61, 0x72, 0x63, 0x61,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var file_parca_query_v1alpha1_query_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_parca_query_v1alpha1_query_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_parca_query_v1alpha1_query_proto_goTypes = []any{
	(ProfileDiffSelection_Mode)(0),  // 0: parca.query.v1alpha1.ProfileDiffSelection.Mode
	(QueryRequest_Mode)(0),          // 1: parca.query.v1alpha1.QueryRequest.Mode
	(QueryRequest_ReportType)(0),    // 2: parca.query.v1alpha1.QueryRequest.ReportType
	(*ProfileTypesRequest)(nil),     // 3: parca.query.v1alpha1.ProfileTypesRequest
	(*ProfileTypesResponse)(nil),    // 4: parca.query.v1alpha1.ProfileTypesResponse
	(*ProfileType)(nil),             // 5: parca.query.v1alpha1.ProfileType
	(*QueryRangeRequest)(nil),       // 6: parca.query.v1alpha1.QueryRangeRequest
	(*QueryRangeResponse)(nil),      // 7: parca.query.v1alpha1.QueryRangeResponse
	(*MetricsSeries)(nil),           // 8: parca.query.v1alpha1.MetricsSeries
	(*MetricsSample)(nil),           // 9: parca.query.v1alpha1.MetricsSample
	(*MergeProfile)(nil),            // 10: parca.query.v1alpha1.MergeProfile
	(*SingleProfile)(nil),           // 11: parca.query.v1alpha1.SingleProfile
	(*DiffProfile)(nil),             // 12: parca.query.v1alpha1.DiffProfile
	(*ProfileDiffSelection)(nil),    // 13: parca.query.v1alpha1.ProfileDiffSelection
	(*QueryRequest)(nil),            // 14: parca.query.v1alpha1.QueryRequest
	(*Filter)(nil),                  // 15: parca.query.v1alpha1.Filter
	(*StackFilter)(nil),             // 16: parca.query.v1alpha1.StackFilter
	(*FunctionNameStackFilter)(nil), // 17: parca.query.v1alpha1.FunctionNameStackFilter
	(*FrameFilter)(nil),             // 18: parca.query.v1alpha1.FrameFilter
	(*BinaryFrameFilter)(nil),       // 19: parca.query.v1alpha1.BinaryFrameFilter
	(*RuntimeFilter)(nil),           // 20: parca.query.v1alpha1.RuntimeFilter
	(*SourceReference)(nil),         // 21: parca.query.v1alpha1.SourceReference
	(*GroupBy)(nil),                 // 22: parca.query.v1alpha1.GroupBy
	(*Top)(nil),                     // 23: parca.query.v1alpha1.Top
	(*TopNode)(nil),                 // 24: parca.query.v1alpha1.TopNode
	(*TopNodeMeta)(nil),             // 25: parca.query.v1alpha1.TopNodeMeta
	(*Flamegraph)(nil),              // 26: parca.query.v1alpha1.Flamegraph
	(*FlamegraphArrow)(nil),         // 27: parca.query.v1alpha1.FlamegraphArrow
	(*Source)(nil),                  // 28: parca.query.v1alpha1.Source
	(*FlamegraphRootNode)(nil),      // 29: parca.query.v1alpha1.FlamegraphRootNode
	(*FlamegraphNode)(nil),          // 30: parca.query.v1alpha1.FlamegraphNode
	(*FlamegraphNodeMeta)(nil),      // 31: parca.query.v1alpha1.FlamegraphNodeMeta
	(*CallgraphNode)(nil),           // 32: parca.query.v1alpha1.CallgraphNode
	(*CallgraphNodeMeta)(nil),       // 33: parca.query.v1alpha1.CallgraphNodeMeta
	(*CallgraphEdge)(nil),           // 34: parca.query.v1alpha1.CallgraphEdge
	(*Callgraph)(nil),               // 35: parca.query.v1alpha1.Callgraph
	(*QueryResponse)(nil),           // 36: parca.query.v1alpha1.QueryResponse
	(*SeriesRequest)(nil),           // 37: parca.query.v1alpha1.SeriesRequest
	(*SeriesResponse)(nil),          // 38: parca.query.v1alpha1.SeriesResponse
	(*LabelsRequest)(nil),           // 39: parca.query.v1alpha1.LabelsRequest
	(*LabelsResponse)(nil),          // 40: parca.query.v1alpha1.LabelsResponse
	(*ValuesRequest)(nil),           // 41: parca.query.v1alpha1.ValuesRequest
	(*ValuesResponse)(nil),          // 42: parca.query.v1alpha1.ValuesResponse
	(*ValueType)(nil),               // 43: parca.query.v1alpha1.ValueType
	(*ShareProfileRequest)(nil),     // 44: parca.query.v1alpha1.ShareProfileRequest
	(*ShareProfileResponse)(nil),    // 45: parca.query.v1alpha1.ShareProfileResponse
	(*TableArrow)(nil),              // 46: parca.query.v1alpha1.TableArrow
	(*ProfileMetadata)(nil),         // 47: parca.query.v1alpha1.ProfileMetadata
	(*timestamppb.Timestamp)(nil),   // 48: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),     // 49: google.protobuf.Duration
	(*v1alpha1.LabelSet)(nil),       // 50: parca.profilestore.v1alpha1.LabelSet
	(*v1alpha11.Location)(nil),      // 51: parca.metastore.v1alpha1.Location
	(*v1alpha11.Mapping)(nil),       // 52: parca.metastore.v1alpha1.Mapping
	(*v1alpha11.Function)(nil),      // 53: parca.metastore.v1alpha1.Function
	(*v1alpha11.Line)(nil),          // 54: parca.metastore.v1alpha1.Line
}
var file_parca_query_v1alpha1_query_proto_depIdxs = []int32{
	5,  // 0: parca.query.v1alpha1.ProfileTypesResponse.types:type_name -> parca.query.v1alpha1.ProfileType
	48, // 1: parca.query.v1alpha1.QueryRangeRequest.start:type_name -> google.protobuf.Timestamp
	48, // 2: parca.query.v1alpha1.QueryRangeRequest.end:type_name -> google.protobuf.Timestamp
	49, // 3: parca.query.v1alpha1.QueryRangeRequest.step:type_name -> google.protobuf.Duration
	8,  // 4: parca.query.v1alpha1.QueryRangeResponse.series:type_name -> parca.query.v1alpha1.MetricsSeries
	50, // 5: parca.query.v1alpha1.MetricsSeries.labelset:type_name -> parca.profilestore.v1alpha1.LabelSet
	9,  // 6: parca.query.v1alpha1.MetricsSeries.samples:type_name -> parca.query.v1alpha1.MetricsSample
	43, // 7: parca.query.v1alpha1.MetricsSeries.period_type:type_name -> parca.query.v1alpha1.ValueType
	43, // 8: parca.query.v1alpha1.MetricsSeries.sample_type:type_name -> parca.query.v1alpha1.ValueType
	48, // 9: parca.query.v1alpha1.MetricsSample.timestamp:type_name -> google.protobuf.Timestamp
	48, // 10: parca.query.v1alpha1.MergeProfile.start:type_name -> google.protobuf.Timestamp
	48, // 11: parca.query.v1alpha1.MergeProfile.end:type_name -> google.protobuf.Timestamp
	48, // 12: parca.query.v1alpha1.SingleProfile.time:type_name -> google.protobuf.Timestamp
	13, // 13: parca.query.v1alpha1.DiffProfile.a:type_name -> parca.query.v1alpha1.ProfileDiffSelection
	13, // 14: parca.query.v1alpha1.DiffProfile.b:type_name -> parca.query.v1alpha1.ProfileDiffSelection
	0,  // 15: parca.query.v1alpha1.ProfileDiffSelection.mode:type_name -> parca.query.v1alpha1.ProfileDiffSelection.Mode
	10, // 16: parca.query.v1alpha1.ProfileDiffSelection.merge:type_name -> parca.query.v1alpha1.MergeProfile
	11, // 17: parca.query.v1alpha1.ProfileDiffSelection.single:type_name -> parca.query.v1alpha1.SingleProfile
	1,  // 18: parca.query.v1alpha1.QueryRequest.mode:type_name -> parca.query.v1alpha1.QueryRequest.Mode
	12, // 19: parca.query.v1alpha1.QueryRequest.diff:type_name -> parca.query.v1alpha1.DiffProfile
	10, // 20: parca.query.v1alpha1.QueryRequest.merge:type_name -> parca.query.v1alpha1.MergeProfile
	11, // 21: parca.query.v1alpha1.QueryRequest.single:type_name -> parca.query.v1alpha1.SingleProfile
	2,  // 22: parca.query.v1alpha1.QueryRequest.report_type:type_name -> parca.query.v1alpha1.QueryRequest.ReportType
	22, // 23: parca.query.v1alpha1.QueryRequest.group_by:type_name -> parca.query.v1alpha1.GroupBy
	21, // 24: parca.query.v1alpha1.QueryRequest.source_reference:type_name -> parca.query.v1alpha1.SourceReference
	20, // 25: parca.query.v1alpha1.QueryRequest.runtime_filter:type_name -> parca.query.v1alpha1.RuntimeFilter
	15, // 26: parca.query.v1alpha1.QueryRequest.filter:type_name -> parca.query.v1alpha1.Filter
	16, // 27: parca.query.v1alpha1.Filter.stack_filter:type_name -> parca.query.v1alpha1.StackFilter
	18, // 28: parca.query.v1alpha1.Filter.frame_filter:type_name -> parca.query.v1alpha1.FrameFilter
	17, // 29: parca.query.v1alpha1.StackFilter.function_name_stack_filter:type_name -> parca.query.v1alpha1.FunctionNameStackFilter
	19, // 30: parca.query.v1alpha1.FrameFilter.binary_frame_filter:type_name -> parca.query.v1alpha1.BinaryFrameFilter
	24, // 31: parca.query.v1alpha1.Top.list:type_name -> parca.query.v1alpha1.TopNode
	25, // 32: parca.query.v1alpha1.TopNode.meta:type_name -> parca.query.v1alpha1.TopNodeMeta
	51, // 33: parca.query.v1alpha1.TopNodeMeta.location:type_name -> parca.metastore.v1alpha1.Location
	52, // 34: parca.query.v1alpha1.TopNodeMeta.mapping:type_name -> parca.metastore.v1alpha1.Mapping
	53, // 35: parca.query.v1alpha1.TopNodeMeta.function:type_name -> parca.metastore.v1alpha1.Function
	54, // 36: parca.query.v1alpha1.TopNodeMeta.line:type_name -> parca.metastore.v1alpha1.Line
	29, // 37: parca.query.v1alpha1.Flamegraph.root:type_name -> parca.query.v1alpha1.FlamegraphRootNode
	51, // 38: parca.query.v1alpha1.Flamegraph.locations:type_name -> parca.metastore.v1alpha1.Location
	52, // 39: parca.query.v1alpha1.Flamegraph.mapping:type_name -> parca.metastore.v1alpha1.Mapping
	53, // 40: parca.query.v1alpha1.Flamegraph.function:type_name -> parca.metastore.v1alpha1.Function
	30, // 41: parca.query.v1alpha1.FlamegraphRootNode.children:type_name -> parca.query.v1alpha1.FlamegraphNode
	31, // 42: parca.query.v1alpha1.FlamegraphNode.meta:type_name -> parca.query.v1alpha1.FlamegraphNodeMeta
	30, // 43: parca.query.v1alpha1.FlamegraphNode.children:type_name -> parca.query.v1alpha1.FlamegraphNode
	51, // 44: parca.query.v1alpha1.FlamegraphNodeMeta.location:type_name -> parca.metastore.v1alpha1.Location
	52, // 45: parca.query.v1alpha1.FlamegraphNodeMeta.mapping:type_name -> parca.metastore.v1alpha1.Mapping
	53, // 46: parca.query.v1alpha1.FlamegraphNodeMeta.function:type_name -> parca.metastore.v1alpha1.Function
	54, // 47: parca.query.v1alpha1.FlamegraphNodeMeta.line:type_name -> parca.metastore.v1alpha1.Line
	33, // 48: parca.query.v1alpha1.CallgraphNode.meta:type_name -> parca.query.v1alpha1.CallgraphNodeMeta
	51, // 49: parca.query.v1alpha1.CallgraphNodeMeta.location:type_name -> parca.metastore.v1alpha1.Location
	52, // 50: parca.query.v1alpha1.CallgraphNodeMeta.mapping:type_name -> parca.metastore.v1alpha1.Mapping
	53, // 51: parca.query.v1alpha1.CallgraphNodeMeta.function:type_name -> parca.metastore.v1alpha1.Function
	54, // 52: parca.query.v1alpha1.CallgraphNodeMeta.line:type_name -> parca.metastore.v1alpha1.Line
	32, // 53: parca.query.v1alpha1.Callgraph.nodes:type_name -> parca.query.v1alpha1.CallgraphNode
	34, // 54: parca.query.v1alpha1.Callgraph.edges:type_name -> parca.query.v1alpha1.CallgraphEdge
	26, // 55: parca.query.v1alpha1.QueryResponse.flamegraph:type_name -> parca.query.v1alpha1.Flamegraph
	23, // 56: parca.query.v1alpha1.QueryResponse.top:type_name -> parca.query.v1alpha1.Top
	35, // 57: parca.query.v1alpha1.QueryResponse.callgraph:type_name -> parca.query.v1alpha1.Callgraph
	27, // 58: parca.query.v1alpha1.QueryResponse.flamegraph_arrow:type_name -> parca.query.v1alpha1.FlamegraphArrow
	28, // 59: parca.query.v1alpha1.QueryResponse.source:type_name -> parca.query.v1alpha1.Source
	46, // 60: parca.query.v1alpha1.QueryResponse.table_arrow:type_name -> parca.query.v1alpha1.TableArrow
	47, // 61: parca.query.v1alpha1.QueryResponse.profile_metadata:type_name -> parca.query.v1alpha1.ProfileMetadata
	48, // 62: parca.query.v1alpha1.SeriesRequest.start:type_name -> google.protobuf.Timestamp
	48, // 63: parca.query.v1alpha1.SeriesRequest.end:type_name -> google.protobuf.Timestamp
	48, // 64: parca.query.v1alpha1.LabelsRequest.start:type_name -> google.protobuf.Timestamp
	48, // 65: parca.query.v1alpha1.LabelsRequest.end:type_name -> google.protobuf.Timestamp
	48, // 66: parca.query.v1alpha1.ValuesRequest.start:type_name -> google.protobuf.Timestamp
	48, // 67: parca.query.v1alpha1.ValuesRequest.end:type_name -> google.protobuf.Timestamp
	14, // 68: parca.query.v1alpha1.ShareProfileRequest.query_request:type_name -> parca.query.v1alpha1.QueryRequest
	6,  // 69: parca.query.v1alpha1.QueryService.QueryRange:input_type -> parca.query.v1alpha1.QueryRangeRequest
	14, // 70: parca.query.v1alpha1.QueryService.Query:input_type -> parca.query.v1alpha1.QueryRequest
	37, // 71: parca.query.v1alpha1.QueryService.Series:input_type -> parca.query.v1alpha1.SeriesRequest
	3,  // 72: parca.query.v1alpha1.QueryService.ProfileTypes:input_type -> parca.query.v1alpha1.ProfileTypesRequest
	39, // 73: parca.query.v1alpha1.QueryService.Labels:input_type -> parca.query.v1alpha1.LabelsRequest
	41, // 74: parca.query.v1alpha1.QueryService.Values:input_type -> parca.query.v1alpha1.ValuesRequest
	44, // 75: parca.query.v1alpha1.QueryService.ShareProfile:input_type -> parca.query.v1alpha1.ShareProfileRequest
	7,  // 76: parca.query.v1alpha1.QueryService.QueryRange:output_type -> parca.query.v1alpha1.QueryRangeResponse
	36, // 77: parca.query.v1alpha1.QueryService.Query:output_type -> parca.query.v1alpha1.QueryResponse
	38, // 78: parca.query.v1alpha1.QueryService.Series:output_type -> parca.query.v1alpha1.SeriesResponse
	4,  // 79: parca.query.v1alpha1.QueryService.ProfileTypes:output_type -> parca.query.v1alpha1.ProfileTypesResponse
	40, // 80: parca.query.v1alpha1.QueryService.Labels:output_type -> parca.query.v1alpha1.LabelsResponse
	42, // 81: parca.query.v1alpha1.QueryService.Values:output_type -> parca.query.v1alpha1.ValuesResponse
	45, // 82: parca.query.v1alpha1.QueryService.ShareProfile:output_type -> parca.query.v1alpha1.ShareProfileResponse
	76, // [76:83] is the sub-list for method output_type
	69, // [69:76] is the sub-list for method input_type
	69, // [69:69] is the sub-list for extension type_name
	69, // [69:69] is the sub-list for extension extendee
	0,  // [0:69] is the sub-list for field type_name
}

func init() { file_parca_query_v1alpha1_query_proto_init() }
func file_parca_query_v1alpha1_query_proto_init() {
	if File_parca_query_v1alpha1_query_proto != nil {
		return
	}
	file_parca_query_v1alpha1_query_proto_msgTypes[9].OneofWrappers = []any{}
	file_parca_query_v1alpha1_query_proto_msgTypes[10].OneofWrappers = []any{
		(*profileDiffSelection_Merge)(nil),
		(*profileDiffSelection_Single)(nil),
	}
	file_parca_query_v1alpha1_query_proto_msgTypes[11].OneofWrappers = []any{
		(*queryRequest_Diff)(nil),
		(*queryRequest_Merge)(nil),
		(*queryRequest_Single)(nil),
	}
	file_parca_query_v1alpha1_query_proto_msgTypes[12].OneofWrappers = []any{
		(*filter_StackFilter)(nil),
		(*filter_FrameFilter)(nil),
	}
	file_parca_query_v1alpha1_query_proto_msgTypes[13].OneofWrappers = []any{
		(*stackFilter_FunctionNameStackFilter)(nil),
	}
	file_parca_query_v1alpha1_query_proto_msgTypes[15].OneofWrappers = []any{
		(*frameFilter_BinaryFrameFilter)(nil),
	}
	file_parca_query_v1alpha1_query_proto_msgTypes[33].OneofWrappers = []any{
		(*queryResponse_Flamegraph)(nil),
		(*queryResponse_Pprof)(nil),
		(*queryResponse_Top)(nil),
		(*queryResponse_Callgraph)(nil),
		(*queryResponse_FlamegraphArrow)(nil),
		(*queryResponse_Source)(nil),
		(*queryResponse_TableArrow)(nil),
		(*queryResponse_ProfileMetadata)(nil),
	}
	file_parca_query_v1alpha1_query_proto_msgTypes[36].OneofWrappers = []any{}
	file_parca_query_v1alpha1_query_proto_msgTypes[38].OneofWrappers = []any{}
	file_parca_query_v1alpha1_query_proto_msgTypes[41].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_parca_query_v1alpha1_query_proto_rawDesc), len(file_parca_query_v1alpha1_query_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_parca_query_v1alpha1_query_proto_goTypes,
		DependencyIndexes: file_parca_query_v1alpha1_query_proto_depIdxs,
		EnumInfos:         file_parca_query_v1alpha1_query_proto_enumTypes,
		MessageInfos:      file_parca_query_v1alpha1_query_proto_msgTypes,
	}.Build()
	File_parca_query_v1alpha1_query_proto = out.File
	file_parca_query_v1alpha1_query_proto_goTypes = nil
	file_parca_query_v1alpha1_query_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: parca/profilestore/v1alpha1/profilestore.proto

//go:build !protoopaque

package profilestorev1alpha1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// WriteRequest may contain an apache arrow record that only contains profiling
// samples with a reference to a stacktrace ID, or a full stacktrace. If it
// only contains samples, the server may request the full stacktrace from the
// client should it not already know them.
type WriteRequest struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// The bytes containing the arrow record.
	Record        []byte `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteRequest) Reset() {
	*x = WriteRequest{}
	mi := &file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRequest) ProtoMessage() {}

func (x *WriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WriteRequest) GetRecord() []byte {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *WriteRequest) SetRecord(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.Record = v
}

type WriteRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The bytes containing the arrow record.
	Record []byte
}

func (b0 WriteRequest_builder) Build() *WriteRequest {
	m0 := &WriteRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Record = b.Record
	return m0
}

// WriteResponse may be empty if the server doesn't need any further
// information, or contain an arrow record that contains the stacktrace IDs
// that are unknown and therefore requested by the client from the server.
type WriteResponse struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// When record is non-empty it contains the bytes of an arrow record that
	// contains a column containing the stacktraces that are unknown.
	Record        []byte `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteResponse) Reset() {
	*x = WriteResponse{}
	mi := &file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteResponse) ProtoMessage() {}

func (x *WriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WriteResponse) GetRecord() []byte {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *WriteResponse) SetRecord(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.Record = v
}

type WriteResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// When record is non-empty it contains the bytes of an arrow record that
	// contains a column containing the stacktraces that are unknown.
	Record []byte
}

func (b0 WriteResponse_builder) Build() *WriteResponse {
	m0 := &WriteResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.Record = b.Record
	return m0
}

// WriteRawRequest writes a pprof profile for a given tenant
type WriteRawRequest struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// tenant is the given tenant to store the pprof profile under
	//
	// Deprecated: Marked as deprecated in parca/profilestore/v1alpha1/profilestore.proto.
	Tenant string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// series is a set raw pprof profiles and accompanying labels
	Series []*RawProfileSeries `protobuf:"bytes,2,rep,name=series,proto3" json:"series,omitempty"`
	// normalized is a flag indicating if the addresses in the profile is normalized for position independent code
	Normalized    bool `protobuf:"varint,3,opt,name=normalized,proto3" json:"normalized,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteRawRequest) Reset() {
	*x = WriteRawRequest{}
	mi := &file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteRawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRawRequest) ProtoMessage() {}

func (x *WriteRawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Marked as deprecated in parca/profilestore/v1alpha1/profilestore.proto.
func (x *WriteRawRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *WriteRawRequest) GetSeries() []*RawProfileSeries {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *WriteRawRequest) GetNormalized() bool {
	if x != nil {
		return x.Normalized
	}
	return false
}

// Deprecated: Marked as deprecated in parca/profilestore/v1alpha1/profilestore.proto.
func (x *WriteRawRequest) SetTenant(v string) {
	x.Tenant = v
}

func (x *WriteRawRequest) SetSeries(v []*RawProfileSeries) {
	x.Series = v
}

func (x *WriteRawRequest) SetNormalized(v bool) {
	x.Normalized = v
}

type WriteRawRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// tenant is the given tenant to store the pprof profile under
	//
	// Deprecated: Marked as deprecated in parca/profilestore/v1alpha1/profilestore.proto.
	Tenant string
	// series is a set raw pprof profiles and accompanying labels
	Series []*RawProfileSeries
	// normalized is a flag indicating if the addresses in the profile is normalized for position independent code
	Normalized bool
}

func (b0 WriteRawRequest_builder) Build() *WriteRawRequest {
	m0 := &WriteRawRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Tenant = b.Tenant
	x.Series = b.Series
	x.Normalized = b.Normalized
	return m0
}

// WriteRawResponse is the empty response
type WriteRawResponse struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteRawResponse) Reset() {
	*x = WriteRawResponse{}
	mi := &file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteRawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRawResponse) ProtoMessage() {}

func (x *WriteRawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type WriteRawResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 WriteRawResponse_builder) Build() *WriteRawResponse {
	m0 := &WriteRawResponse{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// RawProfileSeries represents the pprof profile and its associated labels
type RawProfileSeries struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// LabelSet is the key value pairs to identify the corresponding profile
	Labels *LabelSet `protobuf:"bytes,1,opt,name=labels,proto3" json:"labels,omitempty"`
	// samples are the set of profile bytes
	Samples       []*RawSample `protobuf:"bytes,2,rep,name=samples,proto3" json:"samples,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RawProfileSeries) Reset() {
	*x = RawProfileSeries{}
	mi := &file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RawProfileSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawProfileSeries) ProtoMessage() {}

func (x *RawProfileSeries) ProtoReflect() protoreflect.Message {
	mi := &file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RawProfileSeries) GetLabels() *LabelSet {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *RawProfileSeries) GetSamples() []*RawSample {
	if x != nil {
		return x.Samples
	}
	return nil
}

func (x *RawProfileSeries) SetLabels(v *LabelSet) {
	x.Labels = v
}

func (x *RawProfileSeries) SetSamples(v []*RawSample) {
	x.Samples = v
}

func (x *RawProfileSeries) HasLabels() bool {
	if x == nil {
		return false
	}
	return x.Labels != nil
}

func (x *RawProfileSeries) ClearLabels() {
	x.Labels = nil
}

type RawProfileSeries_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// LabelSet is the key value pairs to identify the corresponding profile
	Labels *LabelSet
	// samples are the set of profile bytes
	Samples []*RawSample
}

func (b0 RawProfileSeries_builder) Build() *RawProfileSeries {
	m0 := &RawProfileSeries{}
	b, x := &b0, m0
	_, _ = b, x
	x.Labels = b.Labels
	x.Samples = b.Samples
	return m0
}

// Label is a key value pair of identifiers
type Label struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// name is the label name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// value is the value for the label name
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Label) Reset() {
	*x = Label{}
	mi := &file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Label) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Label) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Label) SetName(v string) {
	x.Name = v
}

func (x *Label) SetValue(v string) {
	x.Value = v
}

type Label_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// name is the label name
	Name string
	// value is the value for the label name
	Value string
}

func (b0 Label_builder) Build() *Label {
	m0 := &Label{}
	b, x := &b0, m0
	_, _ = b, x
	x.Name = b.Name
	x.Value = b.Value
	return m0
}

// LabelSet is a group of labels
type LabelSet struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// labels are the grouping of labels
	Labels        []*Label `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LabelSet) Reset() {
	*x = LabelSet{}
	mi := &file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelSet) ProtoMessage() {}

func (x *LabelSet) ProtoReflect() protoreflect.Message {
	mi := &file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LabelSet) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *LabelSet) SetLabels(v []*Label) {
	x.Labels = v
}

type LabelSet_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// labels are the grouping of labels
	Labels []*Label
}

func (b0 LabelSet_builder) Build() *LabelSet {
	m0 := &LabelSet{}
	b, x := &b0, m0
	_, _ = b, x
	x.Labels = b.Labels
	return m0
}

// RawSample is the set of bytes that correspond to a pprof profile
type RawSample struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// raw_profile is the set of bytes of the pprof profile
	RawProfile []byte `protobuf:"bytes,1,opt,name=raw_profile,json=rawProfile,proto3" json:"raw_profile,omitempty"`
	// information about the executable and executable section for normalizaton
	// purposes.
	ExecutableInfo []*ExecutableInfo `protobuf:"bytes,2,rep,name=executable_info,json=executableInfo,proto3" json:"executable_info,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RawSample) Reset() {
	*x = RawSample{}
	mi := &file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RawSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawSample) ProtoMessage() {}

func (x *RawSample) ProtoReflect() protoreflect.Message {
	mi := &file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RawSample) GetRawProfile() []byte {
	if x != nil {
		return x.RawProfile
	}
	return nil
}

func (x *RawSample) GetExecutableInfo() []*ExecutableInfo {
	if x != nil {
		return x.ExecutableInfo
	}
	return nil
}

func (x *RawSample) SetRawProfile(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.RawProfile = v
}

func (x *RawSample) SetExecutableInfo(v []*ExecutableInfo) {
	x.ExecutableInfo = v
}

type RawSample_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// raw_profile is the set of bytes of the pprof profile
	RawProfile []byte
	// information about the executable and executable section for normalizaton
	// purposes.
	ExecutableInfo []*ExecutableInfo
}

func (b0 RawSample_builder) Build() *RawSample {
	m0 := &RawSample{}
	b, x := &b0, m0
	_, _ = b, x
	x.RawProfile = b.RawProfile
	x.ExecutableInfo = b.ExecutableInfo
	return m0
}

// ExecutableInfo is the information about the executable and executable
// section for normalizaton purposes before symbolization.
type ExecutableInfo struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// elf_type is the type of the elf executable. Technically the elf type is a
	// 16 bit integer, but protobuf's smallest unsigned integer is 32 bits.
	ElfType uint32 `protobuf:"varint,1,opt,name=elf_type,json=elfType,proto3" json:"elf_type,omitempty"`
	// load_segment is the load segment of the executable.
	LoadSegment   *LoadSegment `protobuf:"bytes,2,opt,name=load_segment,json=loadSegment,proto3" json:"load_segment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecutableInfo) Reset() {
	*x = ExecutableInfo{}
	mi := &file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutableInfo) ProtoMessage() {}

func (x *ExecutableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ExecutableInfo) GetElfType() uint32 {
	if x != nil {
		return x.ElfType
	}
	return 0
}

func (x *ExecutableInfo) GetLoadSegment() *LoadSegment {
	if x != nil {
		return x.LoadSegment
	}
	return nil
}

func (x *ExecutableInfo) SetElfType(v uint32) {
	x.ElfType = v
}

func (x *ExecutableInfo) SetLoadSegment(v *LoadSegment) {
	x.LoadSegment = v
}

func (x *ExecutableInfo) HasLoadSegment() bool {
	if x == nil {
		return false
	}
	return x.LoadSegment != nil
}

func (x *ExecutableInfo) ClearLoadSegment() {
	x.LoadSegment = nil
}

type ExecutableInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// elf_type is the type of the elf executable. Technically the elf type is a
	// 16 bit integer, but protobuf's smallest unsigned integer is 32 bits.
	ElfType uint32
	// load_segment is the load segment of the executable.
	LoadSegment *LoadSegment
}

func (b0 ExecutableInfo_builder) Build() *ExecutableInfo {
	m0 := &ExecutableInfo{}
	b, x := &b0, m0
	_, _ = b, x
	x.ElfType = b.ElfType
	x.LoadSegment = b.LoadSegment
	return m0
}

// LoadSegment is the load segment of the executable
type LoadSegment struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// The offset from the beginning of the file at which the first byte of the segment resides.
	Offset uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// The virtual address at which the first byte of the segment resides in memory.
	Vaddr         uint64 `protobuf:"varint,2,opt,name=vaddr,proto3" json:"vaddr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoadSegment) Reset() {
	*x = LoadSegment{}
	mi := &file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadSegment) ProtoMessage() {}

func (x *LoadSegment) ProtoReflect() protoreflect.Message {
	mi := &file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LoadSegment) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *LoadSegment) GetVaddr() uint64 {
	if x != nil {
		return x.Vaddr
	}
	return 0
}

func (x *LoadSegment) SetOffset(v uint64) {
	x.Offset = v
}

func (x *LoadSegment) SetVaddr(v uint64) {
	x.Vaddr = v
}

type LoadSegment_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The offset from the beginning of the file at which the first byte of the segment resides.
	Offset uint64
	// The virtual address at which the first byte of the segment resides in memory.
	Vaddr uint64
}

func (b0 LoadSegment_builder) Build() *LoadSegment {
	m0 := &LoadSegment{}
	b, x := &b0, m0
	_, _ = b, x
	x.Offset = b.Offset
	x.Vaddr = b.Vaddr
	return m0
}

// AgentsRequest is the request to retrieve a list of agents
type AgentsRequest struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentsRequest) Reset() {
	*x = AgentsRequest{}
	mi := &file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentsRequest) ProtoMessage() {}

func (x *AgentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type AgentsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 AgentsRequest_builder) Build() *AgentsRequest {
	m0 := &AgentsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// AgentsResponse is the request to retrieve a list of agents
type AgentsResponse struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// agents is a list of agents
	Agents        []*Agent `protobuf:"bytes,1,rep,name=agents,proto3" json:"agents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentsResponse) Reset() {
	*x = AgentsResponse{}
	mi := &file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentsResponse) ProtoMessage() {}

func (x *AgentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AgentsResponse) GetAgents() []*Agent {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *AgentsResponse) SetAgents(v []*Agent) {
	x.Agents = v
}

type AgentsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// agents is a list of agents
	Agents []*Agent
}

func (b0 AgentsResponse_builder) Build() *AgentsResponse {
	m0 := &AgentsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.Agents = b.Agents
	return m0
}

// Agent is the agent representation
type Agent struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// id is the agent identity that either represent by the node name or the IP address.
	// When node name is not found, this will fallback to IP address.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// last_error is the error message most recently received from a push attempt
	LastError string `protobuf:"bytes,2,opt,name=last_error,json=lastError,proto3" json:"last_error,omitempty"`
	// last_push is the time stamp the last push request was performed
	LastPush *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_push,json=lastPush,proto3" json:"last_push,omitempty"`
	// last_push_duration is the duration of the last push request
	LastPushDuration *durationpb.Duration `protobuf:"bytes,4,opt,name=last_push_duration,json=lastPushDuration,proto3" json:"last_push_duration,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Agent) Reset() {
	*x = Agent{}
	mi := &file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Agent) ProtoMessage() {}

func (x *Agent) ProtoReflect() protoreflect.Message {
	mi := &file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Agent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Agent) GetLastError() string {
	if x != nil {
		return x.LastError
	}
	return ""
}

func (x *Agent) GetLastPush() *timestamppb.Timestamp {
	if x != nil {
		return x.LastPush
	}
	return nil
}

func (x *Agent) GetLastPushDuration() *durationpb.Duration {
	if x != nil {
		return x.LastPushDuration
	}
	return nil
}

func (x *Agent) SetId(v string) {
	x.Id = v
}

func (x *Agent) SetLastError(v string) {
	x.LastError = v
}

func (x *Agent) SetLastPush(v *timestamppb.Timestamp) {
	x.LastPush = v
}

func (x *Agent) SetLastPushDuration(v *durationpb.Duration) {
	x.LastPushDuration = v
}

func (x *Agent) HasLastPush() bool {
	if x == nil {
		return false
	}
	return x.LastPush != nil
}

func (x *Agent) HasLastPushDuration() bool {
	if x == nil {
		return false
	}
	return x.LastPushDuration != nil
}

func (x *Agent) ClearLastPush() {
	x.LastPush = nil
}

func (x *Agent) ClearLastPushDuration() {
	x.LastPushDuration = nil
}

type Agent_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// id is the agent identity that either represent by the node name or the IP address.
	// When node name is not found, this will fallback to IP address.
	Id string
	// last_error is the error message most recently received from a push attempt
	LastError string
	// last_push is the time stamp the last push request was performed
	LastPush *timestamppb.Timestamp
	// last_push_duration is the duration of the last push request
	LastPushDuration *durationpb.Duration
}

func (b0 Agent_builder) Build() *Agent {
	m0 := &Agent{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	x.LastError = b.LastError
	x.LastPush = b.LastPush
	x.LastPushDuration = b.LastPushDuration
	return m0
}

var File_parca_profilestore_v1alpha1_profilestore_proto protoreflect.FileDescriptor

var file_parca_profilestore_v1alpha1_profilestore_proto_rawDesc = string([]byte{
	0x0a, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1b, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x26, 0x0a, 0x0c,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x22, 0x27, 0x0a, 0x0d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x94, 0x01,
	0x0a, 0x0f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x45, 0x0a,
	0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x61, 0x77, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x06, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x61, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x10, 0x52, 0x61, 0x77,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x53, 0x65, 0x74, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x07,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x61, 0x77, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x31,
	0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x46, 0x0a, 0x08, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x12, 0x3a, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x09, 0x52, 0x61,
	0x77, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x61,
	0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x78,
	0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6c, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x65, 0x6c, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3b, 0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x64,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x76, 0x61, 0x64, 0x64, 0x72, 0x22, 0x0f, 0x0a, 0x0d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4c, 0x0a, 0x0e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x37, 0x0a,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x50, 0x75, 0x73, 0x68, 0x12, 0x47, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x75, 0x73, 0x68, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x50, 0x75, 0x73, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32,
	0x9e, 0x02, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x08, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x52, 0x61, 0x77, 0x12, 0x2c, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x61, 0x77,
	0x12, 0x7e, 0x0a, 0x05, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x70, 0x61, 0x72, 0x63,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x28, 0x01, 0x30, 0x01,
	0x32, 0x83, 0x01, 0x0a, 0x0d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x72, 0x0a, 0x06, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x70,
	0x61, 0x72, 0x63, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x2f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x66, 0x5a, 0x64, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x61, 0x72, 0x63, 0x61,
	0x2d, 0x64, 0x65, 0x76, 0x2f, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x61,
	0x72, 0x63, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_parca_profilestore_v1alpha1_profilestore_proto_goTypes = []any{
	(*WriteRequest)(nil),          // 0: parca.profilestore.v1alpha1.WriteRequest
	(*WriteResponse)(nil),         // 1: parca.profilestore.v1alpha1.WriteResponse
	(*WriteRawRequest)(nil),       // 2: parca.profilestore.v1alpha1.WriteRawRequest
	(*WriteRawResponse)(nil),      // 3: parca.profilestore.v1alpha1.WriteRawResponse
	(*RawProfileSeries)(nil),      // 4: parca.profilestore.v1alpha1.RawProfileSeries
	(*Label)(nil),                 // 5: parca.profilestore.v1alpha1.Label
	(*LabelSet)(nil),              // 6: parca.profilestore.v1alpha1.LabelSet
	(*RawSample)(nil),             // 7: parca.profilestore.v1alpha1.RawSample
	(*ExecutableInfo)(nil),        // 8: parca.profilestore.v1alpha1.ExecutableInfo
	(*LoadSegment)(nil),           // 9: parca.profilestore.v1alpha1.LoadSegment
	(*AgentsRequest)(nil),         // 10: parca.profilestore.v1alpha1.AgentsRequest
	(*AgentsResponse)(nil),        // 11: parca.profilestore.v1alpha1.AgentsResponse
	(*Agent)(nil),                 // 12: parca.profilestore.v1alpha1.Agent
	(*timestamppb.Timestamp)(nil), // 13: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 14: google.protobuf.Duration
}
var file_parca_profilestore_v1alpha1_profilestore_proto_depIdxs = []int32{
	4,  // 0: parca.profilestore.v1alpha1.WriteRawRequest.series:type_name -> parca.profilestore.v1alpha1.RawProfileSeries
	6,  // 1: parca.profilestore.v1alpha1.RawProfileSeries.labels:type_name -> parca.profilestore.v1alpha1.LabelSet
	7,  // 2: parca.profilestore.v1alpha1.RawProfileSeries.samples:type_name -> parca.profilestore.v1alpha1.RawSample
	5,  // 3: parca.profilestore.v1alpha1.LabelSet.labels:type_name -> parca.profilestore.v1alpha1.Label
	8,  // 4: parca.profilestore.v1alpha1.RawSample.executable_info:type_name -> parca.profilestore.v1alpha1.ExecutableInfo
	9,  // 5: parca.profilestore.v1alpha1.ExecutableInfo.load_segment:type_name -> parca.profilestore.v1alpha1.LoadSegment
	12, // 6: parca.profilestore.v1alpha1.AgentsResponse.agents:type_name -> parca.profilestore.v1alpha1.Agent
	13, // 7: parca.profilestore.v1alpha1.Agent.last_push:type_name -> google.protobuf.Timestamp
	14, // 8: parca.profilestore.v1alpha1.Agent.last_push_duration:type_name -> google.protobuf.Duration
	2,  // 9: parca.profilestore.v1alpha1.ProfileStoreService.WriteRaw:input_type -> parca.profilestore.v1alpha1.WriteRawRequest
	0,  // 10: parca.profilestore.v1alpha1.ProfileStoreService.Write:input_type -> parca.profilestore.v1alpha1.WriteRequest
	10, // 11: parca.profilestore.v1alpha1.AgentsService.Agents:input_type -> parca.profilestore.v1alpha1.AgentsRequest
	3,  // 12: parca.profilestore.v1alpha1.ProfileStoreService.WriteRaw:output_type -> parca.profilestore.v1alpha1.WriteRawResponse
	1,  // 13: parca.profilestore.v1alpha1.ProfileStoreService.Write:output_type -> parca.profilestore.v1alpha1.WriteResponse
	11, // 14: parca.profilestore.v1alpha1.AgentsService.Agents:output_type -> parca.profilestore.v1alpha1.AgentsResponse
	12, // [12:15] is the sub-list for method output_type
	9,  // [9:12] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_parca_profilestore_v1alpha1_profilestore_proto_init() }
func file_parca_profilestore_v1alpha1_profilestore_proto_init() {
	if File_parca_profilestore_v1alpha1_profilestore_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_parca_profilestore_v1alpha1_profilestore_proto_rawDesc), len(file_parca_profilestore_v1alpha1_profilestore_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_parca_profilestore_v1alpha1_profilestore_proto_goTypes,
		DependencyIndexes: file_parca_profilestore_v1alpha1_profilestore_proto_depIdxs,
		MessageInfos:      file_parca_profilestore_v1alpha1_profilestore_proto_msgTypes,
	}.Build()
	File_parca_profilestore_v1alpha1_profilestore_proto = out.File
	file_parca_profilestore_v1alpha1_profilestore_proto_goTypes = nil
	file_parca_profilestore_v1alpha1_profilestore_proto_depIdxs = nil
}

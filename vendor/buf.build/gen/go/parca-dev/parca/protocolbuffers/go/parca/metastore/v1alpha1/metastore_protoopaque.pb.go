// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: parca/metastore/v1alpha1/metastore.proto

//go:build protoopaque

package metastorev1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GetOrCreateMappingsRequest contains all information about mappings that are
// requested to be retrieved or created if they don't already exist.
type GetOrCreateMappingsRequest struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Mappings *[]*Mapping            `protobuf:"bytes,1,rep,name=mappings,proto3"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetOrCreateMappingsRequest) Reset() {
	*x = GetOrCreateMappingsRequest{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrCreateMappingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrCreateMappingsRequest) ProtoMessage() {}

func (x *GetOrCreateMappingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetOrCreateMappingsRequest) GetMappings() []*Mapping {
	if x != nil {
		if x.xxx_hidden_Mappings != nil {
			return *x.xxx_hidden_Mappings
		}
	}
	return nil
}

func (x *GetOrCreateMappingsRequest) SetMappings(v []*Mapping) {
	x.xxx_hidden_Mappings = &v
}

type GetOrCreateMappingsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Mappings to be created or retrieved.
	Mappings []*Mapping
}

func (b0 GetOrCreateMappingsRequest_builder) Build() *GetOrCreateMappingsRequest {
	m0 := &GetOrCreateMappingsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Mappings = &b.Mappings
	return m0
}

// GetOrCreateMappingsResponse contains information about mappings requested.
type GetOrCreateMappingsResponse struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Mappings *[]*Mapping            `protobuf:"bytes,1,rep,name=mappings,proto3"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetOrCreateMappingsResponse) Reset() {
	*x = GetOrCreateMappingsResponse{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrCreateMappingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrCreateMappingsResponse) ProtoMessage() {}

func (x *GetOrCreateMappingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetOrCreateMappingsResponse) GetMappings() []*Mapping {
	if x != nil {
		if x.xxx_hidden_Mappings != nil {
			return *x.xxx_hidden_Mappings
		}
	}
	return nil
}

func (x *GetOrCreateMappingsResponse) SetMappings(v []*Mapping) {
	x.xxx_hidden_Mappings = &v
}

type GetOrCreateMappingsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Mappings that are known to the backing metastore. If any mappings didn't
	// exist before the request they have now been persisted and are uniquely
	// identifyable through their key.
	Mappings []*Mapping
}

func (b0 GetOrCreateMappingsResponse_builder) Build() *GetOrCreateMappingsResponse {
	m0 := &GetOrCreateMappingsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Mappings = &b.Mappings
	return m0
}

// GetOrCreateFunctionsRequest contains all information about functions that are
// requested to be retrieved or created if they don't already exist.
type GetOrCreateFunctionsRequest struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Functions *[]*Function           `protobuf:"bytes,1,rep,name=functions,proto3"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetOrCreateFunctionsRequest) Reset() {
	*x = GetOrCreateFunctionsRequest{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrCreateFunctionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrCreateFunctionsRequest) ProtoMessage() {}

func (x *GetOrCreateFunctionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetOrCreateFunctionsRequest) GetFunctions() []*Function {
	if x != nil {
		if x.xxx_hidden_Functions != nil {
			return *x.xxx_hidden_Functions
		}
	}
	return nil
}

func (x *GetOrCreateFunctionsRequest) SetFunctions(v []*Function) {
	x.xxx_hidden_Functions = &v
}

type GetOrCreateFunctionsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Functions to be created or retrieved.
	Functions []*Function
}

func (b0 GetOrCreateFunctionsRequest_builder) Build() *GetOrCreateFunctionsRequest {
	m0 := &GetOrCreateFunctionsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Functions = &b.Functions
	return m0
}

// GetOrCreateFunctionsResponse contains information about functions requested.
type GetOrCreateFunctionsResponse struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Functions *[]*Function           `protobuf:"bytes,1,rep,name=functions,proto3"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetOrCreateFunctionsResponse) Reset() {
	*x = GetOrCreateFunctionsResponse{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrCreateFunctionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrCreateFunctionsResponse) ProtoMessage() {}

func (x *GetOrCreateFunctionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetOrCreateFunctionsResponse) GetFunctions() []*Function {
	if x != nil {
		if x.xxx_hidden_Functions != nil {
			return *x.xxx_hidden_Functions
		}
	}
	return nil
}

func (x *GetOrCreateFunctionsResponse) SetFunctions(v []*Function) {
	x.xxx_hidden_Functions = &v
}

type GetOrCreateFunctionsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Functions that are known to the backing metastore. If any functions didn't
	// exist before the request they have now been persisted and are uniquely
	// identifyable through their key.
	Functions []*Function
}

func (b0 GetOrCreateFunctionsResponse_builder) Build() *GetOrCreateFunctionsResponse {
	m0 := &GetOrCreateFunctionsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Functions = &b.Functions
	return m0
}

// GetOrCreateLocationsRequest contains all information about locations that are
// requested to be retrieved or created if they don't already exist.
type GetOrCreateLocationsRequest struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Locations *[]*Location           `protobuf:"bytes,1,rep,name=locations,proto3"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetOrCreateLocationsRequest) Reset() {
	*x = GetOrCreateLocationsRequest{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrCreateLocationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrCreateLocationsRequest) ProtoMessage() {}

func (x *GetOrCreateLocationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetOrCreateLocationsRequest) GetLocations() []*Location {
	if x != nil {
		if x.xxx_hidden_Locations != nil {
			return *x.xxx_hidden_Locations
		}
	}
	return nil
}

func (x *GetOrCreateLocationsRequest) SetLocations(v []*Location) {
	x.xxx_hidden_Locations = &v
}

type GetOrCreateLocationsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Locations to be created or retrieved.
	Locations []*Location
}

func (b0 GetOrCreateLocationsRequest_builder) Build() *GetOrCreateLocationsRequest {
	m0 := &GetOrCreateLocationsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Locations = &b.Locations
	return m0
}

// GetOrCreateLocationsResponse contains information about locations requested.
type GetOrCreateLocationsResponse struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Locations *[]*Location           `protobuf:"bytes,1,rep,name=locations,proto3"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetOrCreateLocationsResponse) Reset() {
	*x = GetOrCreateLocationsResponse{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrCreateLocationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrCreateLocationsResponse) ProtoMessage() {}

func (x *GetOrCreateLocationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetOrCreateLocationsResponse) GetLocations() []*Location {
	if x != nil {
		if x.xxx_hidden_Locations != nil {
			return *x.xxx_hidden_Locations
		}
	}
	return nil
}

func (x *GetOrCreateLocationsResponse) SetLocations(v []*Location) {
	x.xxx_hidden_Locations = &v
}

type GetOrCreateLocationsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Locations that are known to the backing metastore. If any locations didn't
	// exist before the request they have now been persisted and are uniquely
	// identifyable through their key.
	Locations []*Location
}

func (b0 GetOrCreateLocationsResponse_builder) Build() *GetOrCreateLocationsResponse {
	m0 := &GetOrCreateLocationsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Locations = &b.Locations
	return m0
}

// GetOrCreateStracktracesRequest contains all information about stacktraces
// that are requested to be retrieved or created if they don't already exist.
type GetOrCreateStacktracesRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Stacktraces *[]*Stacktrace         `protobuf:"bytes,1,rep,name=stacktraces,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetOrCreateStacktracesRequest) Reset() {
	*x = GetOrCreateStacktracesRequest{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrCreateStacktracesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrCreateStacktracesRequest) ProtoMessage() {}

func (x *GetOrCreateStacktracesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetOrCreateStacktracesRequest) GetStacktraces() []*Stacktrace {
	if x != nil {
		if x.xxx_hidden_Stacktraces != nil {
			return *x.xxx_hidden_Stacktraces
		}
	}
	return nil
}

func (x *GetOrCreateStacktracesRequest) SetStacktraces(v []*Stacktrace) {
	x.xxx_hidden_Stacktraces = &v
}

type GetOrCreateStacktracesRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Stacktraces to be created or retrieved.
	Stacktraces []*Stacktrace
}

func (b0 GetOrCreateStacktracesRequest_builder) Build() *GetOrCreateStacktracesRequest {
	m0 := &GetOrCreateStacktracesRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Stacktraces = &b.Stacktraces
	return m0
}

// GetOrCreateStacktracesResponse contains information about locations requested.
type GetOrCreateStacktracesResponse struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Stacktraces *[]*Stacktrace         `protobuf:"bytes,1,rep,name=stacktraces,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetOrCreateStacktracesResponse) Reset() {
	*x = GetOrCreateStacktracesResponse{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrCreateStacktracesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrCreateStacktracesResponse) ProtoMessage() {}

func (x *GetOrCreateStacktracesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetOrCreateStacktracesResponse) GetStacktraces() []*Stacktrace {
	if x != nil {
		if x.xxx_hidden_Stacktraces != nil {
			return *x.xxx_hidden_Stacktraces
		}
	}
	return nil
}

func (x *GetOrCreateStacktracesResponse) SetStacktraces(v []*Stacktrace) {
	x.xxx_hidden_Stacktraces = &v
}

type GetOrCreateStacktracesResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Stacktraces that are known to the backing metastore. If any stacktraces
	// didn't exist before the request they have now been persisted and are
	// uniquely identifyable through their key.
	Stacktraces []*Stacktrace
}

func (b0 GetOrCreateStacktracesResponse_builder) Build() *GetOrCreateStacktracesResponse {
	m0 := &GetOrCreateStacktracesResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Stacktraces = &b.Stacktraces
	return m0
}

// UnsymbolizedLocationsRequest contains information about the unsymbolized
// locations requested. While currently empty, this could in the future contain
// a sharding configuration or limit the number of locations to return.
type UnsymbolizedLocationsRequest struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Limit  uint32                 `protobuf:"varint,1,opt,name=limit,proto3"`
	xxx_hidden_MinKey string                 `protobuf:"bytes,2,opt,name=min_key,json=minKey,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UnsymbolizedLocationsRequest) Reset() {
	*x = UnsymbolizedLocationsRequest{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnsymbolizedLocationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsymbolizedLocationsRequest) ProtoMessage() {}

func (x *UnsymbolizedLocationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UnsymbolizedLocationsRequest) GetLimit() uint32 {
	if x != nil {
		return x.xxx_hidden_Limit
	}
	return 0
}

func (x *UnsymbolizedLocationsRequest) GetMinKey() string {
	if x != nil {
		return x.xxx_hidden_MinKey
	}
	return ""
}

func (x *UnsymbolizedLocationsRequest) SetLimit(v uint32) {
	x.xxx_hidden_Limit = v
}

func (x *UnsymbolizedLocationsRequest) SetMinKey(v string) {
	x.xxx_hidden_MinKey = v
}

type UnsymbolizedLocationsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The maximum number of locations to return.
	Limit uint32
	// The minimum key to start returning locations from.
	MinKey string
}

func (b0 UnsymbolizedLocationsRequest_builder) Build() *UnsymbolizedLocationsRequest {
	m0 := &UnsymbolizedLocationsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Limit = b.Limit
	x.xxx_hidden_MinKey = b.MinKey
	return m0
}

// UnsymbolizedLocationsResponse contains information about the requested
// locations that should be symbolizable but potentially haven't been
// symbolized yet.
type UnsymbolizedLocationsResponse struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Locations *[]*Location           `protobuf:"bytes,1,rep,name=locations,proto3"`
	xxx_hidden_MaxKey    string                 `protobuf:"bytes,2,opt,name=max_key,json=maxKey,proto3"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *UnsymbolizedLocationsResponse) Reset() {
	*x = UnsymbolizedLocationsResponse{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnsymbolizedLocationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsymbolizedLocationsResponse) ProtoMessage() {}

func (x *UnsymbolizedLocationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UnsymbolizedLocationsResponse) GetLocations() []*Location {
	if x != nil {
		if x.xxx_hidden_Locations != nil {
			return *x.xxx_hidden_Locations
		}
	}
	return nil
}

func (x *UnsymbolizedLocationsResponse) GetMaxKey() string {
	if x != nil {
		return x.xxx_hidden_MaxKey
	}
	return ""
}

func (x *UnsymbolizedLocationsResponse) SetLocations(v []*Location) {
	x.xxx_hidden_Locations = &v
}

func (x *UnsymbolizedLocationsResponse) SetMaxKey(v string) {
	x.xxx_hidden_MaxKey = v
}

type UnsymbolizedLocationsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Locations that have a mapping and address that should be symbolizable.
	Locations []*Location
	// Key of the last location returned. This can be used in a subsequent call
	// to UnsymbolizedLocations to continue from the last returned location.
	MaxKey string
}

func (b0 UnsymbolizedLocationsResponse_builder) Build() *UnsymbolizedLocationsResponse {
	m0 := &UnsymbolizedLocationsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Locations = &b.Locations
	x.xxx_hidden_MaxKey = b.MaxKey
	return m0
}

// CreateLocationLinesRequest contains locations and their location lines to be
// saved.
type CreateLocationLinesRequest struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Locations *[]*Location           `protobuf:"bytes,1,rep,name=locations,proto3"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CreateLocationLinesRequest) Reset() {
	*x = CreateLocationLinesRequest{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLocationLinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLocationLinesRequest) ProtoMessage() {}

func (x *CreateLocationLinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CreateLocationLinesRequest) GetLocations() []*Location {
	if x != nil {
		if x.xxx_hidden_Locations != nil {
			return *x.xxx_hidden_Locations
		}
	}
	return nil
}

func (x *CreateLocationLinesRequest) SetLocations(v []*Location) {
	x.xxx_hidden_Locations = &v
}

type CreateLocationLinesRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Locations that have location lines to be saved.
	Locations []*Location
}

func (b0 CreateLocationLinesRequest_builder) Build() *CreateLocationLinesRequest {
	m0 := &CreateLocationLinesRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Locations = &b.Locations
	return m0
}

// CreateLocationLinesResponse details about the location lines creation.
type CreateLocationLinesResponse struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateLocationLinesResponse) Reset() {
	*x = CreateLocationLinesResponse{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLocationLinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLocationLinesResponse) ProtoMessage() {}

func (x *CreateLocationLinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type CreateLocationLinesResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 CreateLocationLinesResponse_builder) Build() *CreateLocationLinesResponse {
	m0 := &CreateLocationLinesResponse{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// StacktracesRequest contains information about the stacktraces requested.
type StacktracesRequest struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_StacktraceIds []string               `protobuf:"bytes,1,rep,name=stacktrace_ids,json=stacktraceIds,proto3"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *StacktracesRequest) Reset() {
	*x = StacktracesRequest{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StacktracesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StacktracesRequest) ProtoMessage() {}

func (x *StacktracesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StacktracesRequest) GetStacktraceIds() []string {
	if x != nil {
		return x.xxx_hidden_StacktraceIds
	}
	return nil
}

func (x *StacktracesRequest) SetStacktraceIds(v []string) {
	x.xxx_hidden_StacktraceIds = v
}

type StacktracesRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// IDs of stacktraces to retrieve.
	StacktraceIds []string
}

func (b0 StacktracesRequest_builder) Build() *StacktracesRequest {
	m0 := &StacktracesRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_StacktraceIds = b.StacktraceIds
	return m0
}

// StacktracesRequest contains the requested stacktraces.
type StacktracesResponse struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Stacktraces *[]*Stacktrace         `protobuf:"bytes,1,rep,name=stacktraces,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *StacktracesResponse) Reset() {
	*x = StacktracesResponse{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StacktracesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StacktracesResponse) ProtoMessage() {}

func (x *StacktracesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StacktracesResponse) GetStacktraces() []*Stacktrace {
	if x != nil {
		if x.xxx_hidden_Stacktraces != nil {
			return *x.xxx_hidden_Stacktraces
		}
	}
	return nil
}

func (x *StacktracesResponse) SetStacktraces(v []*Stacktrace) {
	x.xxx_hidden_Stacktraces = &v
}

type StacktracesResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Stacktraces that are known to the backing metastore.
	Stacktraces []*Stacktrace
}

func (b0 StacktracesResponse_builder) Build() *StacktracesResponse {
	m0 := &StacktracesResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Stacktraces = &b.Stacktraces
	return m0
}

// LocationsRequest contains information about the locations requested.
type LocationsRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_LocationIds []string               `protobuf:"bytes,1,rep,name=location_ids,json=locationIds,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *LocationsRequest) Reset() {
	*x = LocationsRequest{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationsRequest) ProtoMessage() {}

func (x *LocationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LocationsRequest) GetLocationIds() []string {
	if x != nil {
		return x.xxx_hidden_LocationIds
	}
	return nil
}

func (x *LocationsRequest) SetLocationIds(v []string) {
	x.xxx_hidden_LocationIds = v
}

type LocationsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// IDs of locations to retrieve.
	LocationIds []string
}

func (b0 LocationsRequest_builder) Build() *LocationsRequest {
	m0 := &LocationsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_LocationIds = b.LocationIds
	return m0
}

// LocationsResponse contains the requested locations.
type LocationsResponse struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Locations *[]*Location           `protobuf:"bytes,1,rep,name=locations,proto3"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *LocationsResponse) Reset() {
	*x = LocationsResponse{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationsResponse) ProtoMessage() {}

func (x *LocationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LocationsResponse) GetLocations() []*Location {
	if x != nil {
		if x.xxx_hidden_Locations != nil {
			return *x.xxx_hidden_Locations
		}
	}
	return nil
}

func (x *LocationsResponse) SetLocations(v []*Location) {
	x.xxx_hidden_Locations = &v
}

type LocationsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Locations that are known to the backing metastore.
	Locations []*Location
}

func (b0 LocationsResponse_builder) Build() *LocationsResponse {
	m0 := &LocationsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Locations = &b.Locations
	return m0
}

// LocationLinesRequest contains information about the location's lines requested.
type LocationLinesRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_LocationIds []string               `protobuf:"bytes,1,rep,name=location_ids,json=locationIds,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *LocationLinesRequest) Reset() {
	*x = LocationLinesRequest{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocationLinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationLinesRequest) ProtoMessage() {}

func (x *LocationLinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LocationLinesRequest) GetLocationIds() []string {
	if x != nil {
		return x.xxx_hidden_LocationIds
	}
	return nil
}

func (x *LocationLinesRequest) SetLocationIds(v []string) {
	x.xxx_hidden_LocationIds = v
}

type LocationLinesRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// IDs of locations to retrieve location lines for.
	LocationIds []string
}

func (b0 LocationLinesRequest_builder) Build() *LocationLinesRequest {
	m0 := &LocationLinesRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_LocationIds = b.LocationIds
	return m0
}

// FunctionsRequest contains information about the functions requested.
type FunctionsRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_FunctionIds []string               `protobuf:"bytes,1,rep,name=function_ids,json=functionIds,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *FunctionsRequest) Reset() {
	*x = FunctionsRequest{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionsRequest) ProtoMessage() {}

func (x *FunctionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FunctionsRequest) GetFunctionIds() []string {
	if x != nil {
		return x.xxx_hidden_FunctionIds
	}
	return nil
}

func (x *FunctionsRequest) SetFunctionIds(v []string) {
	x.xxx_hidden_FunctionIds = v
}

type FunctionsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// IDs of functions to retrieve.
	FunctionIds []string
}

func (b0 FunctionsRequest_builder) Build() *FunctionsRequest {
	m0 := &FunctionsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_FunctionIds = b.FunctionIds
	return m0
}

// FunctionsResponse contains the requested functions.
type FunctionsResponse struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Functions *[]*Function           `protobuf:"bytes,1,rep,name=functions,proto3"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FunctionsResponse) Reset() {
	*x = FunctionsResponse{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionsResponse) ProtoMessage() {}

func (x *FunctionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FunctionsResponse) GetFunctions() []*Function {
	if x != nil {
		if x.xxx_hidden_Functions != nil {
			return *x.xxx_hidden_Functions
		}
	}
	return nil
}

func (x *FunctionsResponse) SetFunctions(v []*Function) {
	x.xxx_hidden_Functions = &v
}

type FunctionsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Functions that are known to the backing metastore.
	Functions []*Function
}

func (b0 FunctionsResponse_builder) Build() *FunctionsResponse {
	m0 := &FunctionsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Functions = &b.Functions
	return m0
}

// MappingsRequest contains information about the mappings requested.
type MappingsRequest struct {
	state                 protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_MappingIds []string               `protobuf:"bytes,1,rep,name=mapping_ids,json=mappingIds,proto3"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *MappingsRequest) Reset() {
	*x = MappingsRequest{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MappingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MappingsRequest) ProtoMessage() {}

func (x *MappingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MappingsRequest) GetMappingIds() []string {
	if x != nil {
		return x.xxx_hidden_MappingIds
	}
	return nil
}

func (x *MappingsRequest) SetMappingIds(v []string) {
	x.xxx_hidden_MappingIds = v
}

type MappingsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// IDs of mappings to retrieve.
	MappingIds []string
}

func (b0 MappingsRequest_builder) Build() *MappingsRequest {
	m0 := &MappingsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_MappingIds = b.MappingIds
	return m0
}

// MappingsResponse contains the requested mappings.
type MappingsResponse struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Mappings *[]*Mapping            `protobuf:"bytes,1,rep,name=mappings,proto3"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MappingsResponse) Reset() {
	*x = MappingsResponse{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MappingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MappingsResponse) ProtoMessage() {}

func (x *MappingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MappingsResponse) GetMappings() []*Mapping {
	if x != nil {
		if x.xxx_hidden_Mappings != nil {
			return *x.xxx_hidden_Mappings
		}
	}
	return nil
}

func (x *MappingsResponse) SetMappings(v []*Mapping) {
	x.xxx_hidden_Mappings = &v
}

type MappingsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Mappings that are known to the backing metastore.
	Mappings []*Mapping
}

func (b0 MappingsResponse_builder) Build() *MappingsResponse {
	m0 := &MappingsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Mappings = &b.Mappings
	return m0
}

// Sample is a stack trace with optional labels.
type Sample struct {
	state                   protoimpl.MessageState     `protogen:"opaque.v1"`
	xxx_hidden_StacktraceId string                     `protobuf:"bytes,1,opt,name=stacktrace_id,json=stacktraceId,proto3"`
	xxx_hidden_Labels       map[string]*SampleLabel    `protobuf:"bytes,2,rep,name=labels,proto3" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_NumLabels    map[string]*SampleNumLabel `protobuf:"bytes,3,rep,name=num_labels,json=numLabels,proto3" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_NumUnits     map[string]*SampleNumUnit  `protobuf:"bytes,4,rep,name=num_units,json=numUnits,proto3" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *Sample) Reset() {
	*x = Sample{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample) ProtoMessage() {}

func (x *Sample) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Sample) GetStacktraceId() string {
	if x != nil {
		return x.xxx_hidden_StacktraceId
	}
	return ""
}

func (x *Sample) GetLabels() map[string]*SampleLabel {
	if x != nil {
		return x.xxx_hidden_Labels
	}
	return nil
}

func (x *Sample) GetNumLabels() map[string]*SampleNumLabel {
	if x != nil {
		return x.xxx_hidden_NumLabels
	}
	return nil
}

func (x *Sample) GetNumUnits() map[string]*SampleNumUnit {
	if x != nil {
		return x.xxx_hidden_NumUnits
	}
	return nil
}

func (x *Sample) SetStacktraceId(v string) {
	x.xxx_hidden_StacktraceId = v
}

func (x *Sample) SetLabels(v map[string]*SampleLabel) {
	x.xxx_hidden_Labels = v
}

func (x *Sample) SetNumLabels(v map[string]*SampleNumLabel) {
	x.xxx_hidden_NumLabels = v
}

func (x *Sample) SetNumUnits(v map[string]*SampleNumUnit) {
	x.xxx_hidden_NumUnits = v
}

type Sample_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// stacktrace_id references stack trace of the sample.
	StacktraceId string
	// labels are extra labels for a stack trace.
	Labels map[string]*SampleLabel
	// num_labels are the num of labels.
	NumLabels map[string]*SampleNumLabel
	// num_units are the units for the labels.
	NumUnits map[string]*SampleNumUnit
}

func (b0 Sample_builder) Build() *Sample {
	m0 := &Sample{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_StacktraceId = b.StacktraceId
	x.xxx_hidden_Labels = b.Labels
	x.xxx_hidden_NumLabels = b.NumLabels
	x.xxx_hidden_NumUnits = b.NumUnits
	return m0
}

// Stacktrace is a collection of locations.
type Stacktrace struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          string                 `protobuf:"bytes,1,opt,name=id,proto3"`
	xxx_hidden_LocationIds []string               `protobuf:"bytes,2,rep,name=location_ids,json=locationIds,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Stacktrace) Reset() {
	*x = Stacktrace{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Stacktrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stacktrace) ProtoMessage() {}

func (x *Stacktrace) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Stacktrace) GetId() string {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return ""
}

func (x *Stacktrace) GetLocationIds() []string {
	if x != nil {
		return x.xxx_hidden_LocationIds
	}
	return nil
}

func (x *Stacktrace) SetId(v string) {
	x.xxx_hidden_Id = v
}

func (x *Stacktrace) SetLocationIds(v []string) {
	x.xxx_hidden_LocationIds = v
}

type Stacktrace_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// stacktrace_id references stack trace of the stacktrace.
	Id string
	// locations are the locations in the stack trace.
	LocationIds []string
}

func (b0 Stacktrace_builder) Build() *Stacktrace {
	m0 := &Stacktrace{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_LocationIds = b.LocationIds
	return m0
}

// SampleLabel are the labels added to a Sample.
type SampleLabel struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Labels []string               `protobuf:"bytes,1,rep,name=labels,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SampleLabel) Reset() {
	*x = SampleLabel{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SampleLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleLabel) ProtoMessage() {}

func (x *SampleLabel) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SampleLabel) GetLabels() []string {
	if x != nil {
		return x.xxx_hidden_Labels
	}
	return nil
}

func (x *SampleLabel) SetLabels(v []string) {
	x.xxx_hidden_Labels = v
}

type SampleLabel_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// labels for a label in a Sample.
	Labels []string
}

func (b0 SampleLabel_builder) Build() *SampleLabel {
	m0 := &SampleLabel{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Labels = b.Labels
	return m0
}

// SampleNumLabel are the num of labels of a Sample.
type SampleNumLabel struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_NumLabels []int64                `protobuf:"varint,1,rep,packed,name=num_labels,json=numLabels,proto3"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SampleNumLabel) Reset() {
	*x = SampleNumLabel{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SampleNumLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleNumLabel) ProtoMessage() {}

func (x *SampleNumLabel) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SampleNumLabel) GetNumLabels() []int64 {
	if x != nil {
		return x.xxx_hidden_NumLabels
	}
	return nil
}

func (x *SampleNumLabel) SetNumLabels(v []int64) {
	x.xxx_hidden_NumLabels = v
}

type SampleNumLabel_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// num_labels are the num_label of a Sample.
	NumLabels []int64
}

func (b0 SampleNumLabel_builder) Build() *SampleNumLabel {
	m0 := &SampleNumLabel{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_NumLabels = b.NumLabels
	return m0
}

// SampleNumUnit are the num units of a Sample.
type SampleNumUnit struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Units []string               `protobuf:"bytes,1,rep,name=units,proto3"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SampleNumUnit) Reset() {
	*x = SampleNumUnit{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SampleNumUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleNumUnit) ProtoMessage() {}

func (x *SampleNumUnit) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SampleNumUnit) GetUnits() []string {
	if x != nil {
		return x.xxx_hidden_Units
	}
	return nil
}

func (x *SampleNumUnit) SetUnits(v []string) {
	x.xxx_hidden_Units = v
}

type SampleNumUnit_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// units of a labels of a Sample.
	Units []string
}

func (b0 SampleNumUnit_builder) Build() *SampleNumUnit {
	m0 := &SampleNumUnit{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Units = b.Units
	return m0
}

// Location describes a single location of a stack traces.
type Location struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id           string                 `protobuf:"bytes,1,opt,name=id,proto3"`
	xxx_hidden_Address      uint64                 `protobuf:"varint,2,opt,name=address,proto3"`
	xxx_hidden_MappingId    string                 `protobuf:"bytes,4,opt,name=mapping_id,json=mappingId,proto3"`
	xxx_hidden_IsFolded     bool                   `protobuf:"varint,5,opt,name=is_folded,json=isFolded,proto3"`
	xxx_hidden_Lines        *[]*Line               `protobuf:"bytes,6,rep,name=lines,proto3"`
	xxx_hidden_MappingIndex uint32                 `protobuf:"varint,7,opt,name=mapping_index,json=mappingIndex,proto3"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *Location) Reset() {
	*x = Location{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Location) GetId() string {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return ""
}

func (x *Location) GetAddress() uint64 {
	if x != nil {
		return x.xxx_hidden_Address
	}
	return 0
}

func (x *Location) GetMappingId() string {
	if x != nil {
		return x.xxx_hidden_MappingId
	}
	return ""
}

func (x *Location) GetIsFolded() bool {
	if x != nil {
		return x.xxx_hidden_IsFolded
	}
	return false
}

func (x *Location) GetLines() []*Line {
	if x != nil {
		if x.xxx_hidden_Lines != nil {
			return *x.xxx_hidden_Lines
		}
	}
	return nil
}

func (x *Location) GetMappingIndex() uint32 {
	if x != nil {
		return x.xxx_hidden_MappingIndex
	}
	return 0
}

func (x *Location) SetId(v string) {
	x.xxx_hidden_Id = v
}

func (x *Location) SetAddress(v uint64) {
	x.xxx_hidden_Address = v
}

func (x *Location) SetMappingId(v string) {
	x.xxx_hidden_MappingId = v
}

func (x *Location) SetIsFolded(v bool) {
	x.xxx_hidden_IsFolded = v
}

func (x *Location) SetLines(v []*Line) {
	x.xxx_hidden_Lines = &v
}

func (x *Location) SetMappingIndex(v uint32) {
	x.xxx_hidden_MappingIndex = v
}

type Location_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// id is the unique identifier for the location.
	Id string
	// address is the memory address of the location if present.
	Address uint64
	// mapping_id is the unique identifier for the mapping associated with the location.
	MappingId string
	// is_folded indicates whether the location is folded into the previous location.
	IsFolded bool
	// lines are the call frames represented by this location. Multiple lines
	// indicate they have been inlined.
	Lines []*Line
	// mapping_index has the index into the mapping table where mappings are sent deduplicated.
	MappingIndex uint32
}

func (b0 Location_builder) Build() *Location {
	m0 := &Location{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_Address = b.Address
	x.xxx_hidden_MappingId = b.MappingId
	x.xxx_hidden_IsFolded = b.IsFolded
	x.xxx_hidden_Lines = &b.Lines
	x.xxx_hidden_MappingIndex = b.MappingIndex
	return m0
}

// Line describes a source code function and its line number.
type Line struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_FunctionId    string                 `protobuf:"bytes,1,opt,name=function_id,json=functionId,proto3"`
	xxx_hidden_Line          int64                  `protobuf:"varint,2,opt,name=line,proto3"`
	xxx_hidden_FunctionIndex uint32                 `protobuf:"varint,3,opt,name=function_index,json=functionIndex,proto3"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *Line) Reset() {
	*x = Line{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Line) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Line) ProtoMessage() {}

func (x *Line) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Line) GetFunctionId() string {
	if x != nil {
		return x.xxx_hidden_FunctionId
	}
	return ""
}

func (x *Line) GetLine() int64 {
	if x != nil {
		return x.xxx_hidden_Line
	}
	return 0
}

func (x *Line) GetFunctionIndex() uint32 {
	if x != nil {
		return x.xxx_hidden_FunctionIndex
	}
	return 0
}

func (x *Line) SetFunctionId(v string) {
	x.xxx_hidden_FunctionId = v
}

func (x *Line) SetLine(v int64) {
	x.xxx_hidden_Line = v
}

func (x *Line) SetFunctionIndex(v uint32) {
	x.xxx_hidden_FunctionIndex = v
}

type Line_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// function_id is the ID of the function.
	FunctionId string
	// line is the line number in the source file of the referenced function.
	Line int64
	// function_index is the index in the functions table.
	FunctionIndex uint32
}

func (b0 Line_builder) Build() *Line {
	m0 := &Line{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_FunctionId = b.FunctionId
	x.xxx_hidden_Line = b.Line
	x.xxx_hidden_FunctionIndex = b.FunctionIndex
	return m0
}

// Function describes metadata of a source code function.
type Function struct {
	state                            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id                    string                 `protobuf:"bytes,1,opt,name=id,proto3"`
	xxx_hidden_StartLine             int64                  `protobuf:"varint,2,opt,name=start_line,json=startLine,proto3"`
	xxx_hidden_Name                  string                 `protobuf:"bytes,3,opt,name=name,proto3"`
	xxx_hidden_SystemName            string                 `protobuf:"bytes,4,opt,name=system_name,json=systemName,proto3"`
	xxx_hidden_Filename              string                 `protobuf:"bytes,5,opt,name=filename,proto3"`
	xxx_hidden_NameStringIndex       uint32                 `protobuf:"varint,6,opt,name=name_string_index,json=nameStringIndex,proto3"`
	xxx_hidden_SystemNameStringIndex uint32                 `protobuf:"varint,7,opt,name=system_name_string_index,json=systemNameStringIndex,proto3"`
	xxx_hidden_FilenameStringIndex   uint32                 `protobuf:"varint,8,opt,name=filename_string_index,json=filenameStringIndex,proto3"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *Function) Reset() {
	*x = Function{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Function) ProtoMessage() {}

func (x *Function) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Function) GetId() string {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return ""
}

func (x *Function) GetStartLine() int64 {
	if x != nil {
		return x.xxx_hidden_StartLine
	}
	return 0
}

func (x *Function) GetName() string {
	if x != nil {
		return x.xxx_hidden_Name
	}
	return ""
}

func (x *Function) GetSystemName() string {
	if x != nil {
		return x.xxx_hidden_SystemName
	}
	return ""
}

func (x *Function) GetFilename() string {
	if x != nil {
		return x.xxx_hidden_Filename
	}
	return ""
}

func (x *Function) GetNameStringIndex() uint32 {
	if x != nil {
		return x.xxx_hidden_NameStringIndex
	}
	return 0
}

func (x *Function) GetSystemNameStringIndex() uint32 {
	if x != nil {
		return x.xxx_hidden_SystemNameStringIndex
	}
	return 0
}

func (x *Function) GetFilenameStringIndex() uint32 {
	if x != nil {
		return x.xxx_hidden_FilenameStringIndex
	}
	return 0
}

func (x *Function) SetId(v string) {
	x.xxx_hidden_Id = v
}

func (x *Function) SetStartLine(v int64) {
	x.xxx_hidden_StartLine = v
}

func (x *Function) SetName(v string) {
	x.xxx_hidden_Name = v
}

func (x *Function) SetSystemName(v string) {
	x.xxx_hidden_SystemName = v
}

func (x *Function) SetFilename(v string) {
	x.xxx_hidden_Filename = v
}

func (x *Function) SetNameStringIndex(v uint32) {
	x.xxx_hidden_NameStringIndex = v
}

func (x *Function) SetSystemNameStringIndex(v uint32) {
	x.xxx_hidden_SystemNameStringIndex = v
}

func (x *Function) SetFilenameStringIndex(v uint32) {
	x.xxx_hidden_FilenameStringIndex = v
}

type Function_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// id is the unique identifier for the function.
	Id string
	// start_line is the line number in the source file of the first line of the function.
	StartLine int64
	// name is the name of the function.
	Name string
	// system_name describes the name of the function, as identified by the
	// system. For instance, it can be a C++ mangled name.
	SystemName string
	// filename is the name of the source file of the function.
	Filename string
	// name_string_index is the index in the string table to the name associated with the function.
	NameStringIndex uint32
	// system_name_string_index is the index in the string table to the system_name associated with the function.
	SystemNameStringIndex uint32
	// filename_string_index is the index in the string table to the filename associated with the function.
	FilenameStringIndex uint32
}

func (b0 Function_builder) Build() *Function {
	m0 := &Function{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_StartLine = b.StartLine
	x.xxx_hidden_Name = b.Name
	x.xxx_hidden_SystemName = b.SystemName
	x.xxx_hidden_Filename = b.Filename
	x.xxx_hidden_NameStringIndex = b.NameStringIndex
	x.xxx_hidden_SystemNameStringIndex = b.SystemNameStringIndex
	x.xxx_hidden_FilenameStringIndex = b.FilenameStringIndex
	return m0
}

// Mapping describes a memory mapping.
type Mapping struct {
	state                         protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3"`
	xxx_hidden_Start              uint64                 `protobuf:"varint,2,opt,name=start,proto3"`
	xxx_hidden_Limit              uint64                 `protobuf:"varint,3,opt,name=limit,proto3"`
	xxx_hidden_Offset             uint64                 `protobuf:"varint,4,opt,name=offset,proto3"`
	xxx_hidden_File               string                 `protobuf:"bytes,5,opt,name=file,proto3"`
	xxx_hidden_BuildId            string                 `protobuf:"bytes,6,opt,name=build_id,json=buildId,proto3"`
	xxx_hidden_HasFunctions       bool                   `protobuf:"varint,7,opt,name=has_functions,json=hasFunctions,proto3"`
	xxx_hidden_HasFilenames       bool                   `protobuf:"varint,8,opt,name=has_filenames,json=hasFilenames,proto3"`
	xxx_hidden_HasLineNumbers     bool                   `protobuf:"varint,9,opt,name=has_line_numbers,json=hasLineNumbers,proto3"`
	xxx_hidden_HasInlineFrames    bool                   `protobuf:"varint,10,opt,name=has_inline_frames,json=hasInlineFrames,proto3"`
	xxx_hidden_FileStringIndex    uint32                 `protobuf:"varint,11,opt,name=file_string_index,json=fileStringIndex,proto3"`
	xxx_hidden_BuildIdStringIndex uint32                 `protobuf:"varint,12,opt,name=build_id_string_index,json=buildIdStringIndex,proto3"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *Mapping) Reset() {
	*x = Mapping{}
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mapping) ProtoMessage() {}

func (x *Mapping) ProtoReflect() protoreflect.Message {
	mi := &file_parca_metastore_v1alpha1_metastore_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Mapping) GetId() string {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return ""
}

func (x *Mapping) GetStart() uint64 {
	if x != nil {
		return x.xxx_hidden_Start
	}
	return 0
}

func (x *Mapping) GetLimit() uint64 {
	if x != nil {
		return x.xxx_hidden_Limit
	}
	return 0
}

func (x *Mapping) GetOffset() uint64 {
	if x != nil {
		return x.xxx_hidden_Offset
	}
	return 0
}

func (x *Mapping) GetFile() string {
	if x != nil {
		return x.xxx_hidden_File
	}
	return ""
}

func (x *Mapping) GetBuildId() string {
	if x != nil {
		return x.xxx_hidden_BuildId
	}
	return ""
}

func (x *Mapping) GetHasFunctions() bool {
	if x != nil {
		return x.xxx_hidden_HasFunctions
	}
	return false
}

func (x *Mapping) GetHasFilenames() bool {
	if x != nil {
		return x.xxx_hidden_HasFilenames
	}
	return false
}

func (x *Mapping) GetHasLineNumbers() bool {
	if x != nil {
		return x.xxx_hidden_HasLineNumbers
	}
	return false
}

func (x *Mapping) GetHasInlineFrames() bool {
	if x != nil {
		return x.xxx_hidden_HasInlineFrames
	}
	return false
}

func (x *Mapping) GetFileStringIndex() uint32 {
	if x != nil {
		return x.xxx_hidden_FileStringIndex
	}
	return 0
}

func (x *Mapping) GetBuildIdStringIndex() uint32 {
	if x != nil {
		return x.xxx_hidden_BuildIdStringIndex
	}
	return 0
}

func (x *Mapping) SetId(v string) {
	x.xxx_hidden_Id = v
}

func (x *Mapping) SetStart(v uint64) {
	x.xxx_hidden_Start = v
}

func (x *Mapping) SetLimit(v uint64) {
	x.xxx_hidden_Limit = v
}

func (x *Mapping) SetOffset(v uint64) {
	x.xxx_hidden_Offset = v
}

func (x *Mapping) SetFile(v string) {
	x.xxx_hidden_File = v
}

func (x *Mapping) SetBuildId(v string) {
	x.xxx_hidden_BuildId = v
}

func (x *Mapping) SetHasFunctions(v bool) {
	x.xxx_hidden_HasFunctions = v
}

func (x *Mapping) SetHasFilenames(v bool) {
	x.xxx_hidden_HasFilenames = v
}

func (x *Mapping) SetHasLineNumbers(v bool) {
	x.xxx_hidden_HasLineNumbers = v
}

func (x *Mapping) SetHasInlineFrames(v bool) {
	x.xxx_hidden_HasInlineFrames = v
}

func (x *Mapping) SetFileStringIndex(v uint32) {
	x.xxx_hidden_FileStringIndex = v
}

func (x *Mapping) SetBuildIdStringIndex(v uint32) {
	x.xxx_hidden_BuildIdStringIndex = v
}

type Mapping_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// id is the unique identifier for the mapping.
	Id string
	// start is the start address of the mapping.
	Start uint64
	// limit is the length of the address space of the mapping.
	Limit uint64
	// offset in the binary that corresponds to the first mapped address.
	Offset uint64
	// file is the name of the file associated with the mapping.
	File string
	// build_id is the build ID of the mapping.
	BuildId string
	// has_functions indicates whether the mapping has associated functions.
	HasFunctions bool
	// has_filenames indicates whether the mapping has associated filenames.
	HasFilenames bool
	// has_line_numbers indicates whether the mapping has associated line numbers.
	HasLineNumbers bool
	// has_inline_frames indicates whether the mapping has associated inline frames.
	HasInlineFrames bool
	// fileStringIndex is the index in the string table to the file name associated with the mapping.
	FileStringIndex uint32
	// build_id_string_index is the index in the string table to the build ID of the mapping.
	BuildIdStringIndex uint32
}

func (b0 Mapping_builder) Build() *Mapping {
	m0 := &Mapping{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_Start = b.Start
	x.xxx_hidden_Limit = b.Limit
	x.xxx_hidden_Offset = b.Offset
	x.xxx_hidden_File = b.File
	x.xxx_hidden_BuildId = b.BuildId
	x.xxx_hidden_HasFunctions = b.HasFunctions
	x.xxx_hidden_HasFilenames = b.HasFilenames
	x.xxx_hidden_HasLineNumbers = b.HasLineNumbers
	x.xxx_hidden_HasInlineFrames = b.HasInlineFrames
	x.xxx_hidden_FileStringIndex = b.FileStringIndex
	x.xxx_hidden_BuildIdStringIndex = b.BuildIdStringIndex
	return m0
}

var File_parca_metastore_v1alpha1_metastore_proto protoreflect.FileDescriptor

var file_parca_metastore_v1alpha1_metastore_proto_rawDesc = string([]byte{
	0x0a, 0x28, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x70, 0x61, 0x72, 0x63,
	0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x22, 0x5b, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0x5c, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0x5f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x60, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x40, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x5f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x40, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x60, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x67, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x61,
	0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x22, 0x68,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x1c, 0x55, 0x6e, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x7a, 0x0a, 0x1d, 0x55, 0x6e, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61,
	0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61,
	0x78, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x78,
	0x4b, 0x65, 0x79, 0x22, 0x5e, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x40, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3b, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22,
	0x5d, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x61,
	0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x22, 0x35,
	0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x55, 0x0a, 0x11, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x39, 0x0a, 0x14,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x35, 0x0a, 0x10, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x55,
	0x0a, 0x11, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x32, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x73, 0x22, 0x51, 0x0a, 0x10, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xc0, 0x04, 0x0a,
	0x06, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70,
	0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4e, 0x75, 0x6d, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x4b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4e, 0x75, 0x6d, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x1a,
	0x60, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x66, 0x0a, 0x0e, 0x4e, 0x75, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x64, 0x0a, 0x0d, 0x4e, 0x75, 0x6d,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x61,
	0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6d,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x3f, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73,
	0x22, 0x25, 0x0a, 0x0b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x2f, 0x0a, 0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x4e, 0x75, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x6e,
	0x75, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x25, 0x0a, 0x0d, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x22,
	0xcb, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x64, 0x12, 0x34, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x6e,
	0x65, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x62, 0x0a,
	0x04, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0xa3, 0x02, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x32, 0x0a, 0x15, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x8b, 0x03, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68,
	0x61, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x68,
	0x61, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x4c,
	0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61,
	0x73, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x31, 0x0a, 0x15, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x32, 0xf4, 0x09, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x34, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x87, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x2e, 0x70, 0x61, 0x72,
	0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x61,
	0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x37, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x70, 0x61, 0x72, 0x63,
	0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x15, 0x55, 0x6e, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x36, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x55, 0x6e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x34, 0x2e, 0x70, 0x61, 0x72,
	0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x09, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x66, 0x0a, 0x09, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a,
	0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x61, 0x72,
	0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x08, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x29, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c,
	0x0a, 0x0b, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x2c, 0x2e,
	0x70, 0x61, 0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x61,
	0x72, 0x63, 0x61, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x60, 0x5a, 0x5e,
	0x62, 0x75, 0x66, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f,
	0x2f, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x70, 0x61, 0x72, 0x63, 0x61,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x61, 0x72, 0x63, 0x61, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x6d, 0x65, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var file_parca_metastore_v1alpha1_metastore_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_parca_metastore_v1alpha1_metastore_proto_goTypes = []any{
	(*GetOrCreateMappingsRequest)(nil),     // 0: parca.metastore.v1alpha1.GetOrCreateMappingsRequest
	(*GetOrCreateMappingsResponse)(nil),    // 1: parca.metastore.v1alpha1.GetOrCreateMappingsResponse
	(*GetOrCreateFunctionsRequest)(nil),    // 2: parca.metastore.v1alpha1.GetOrCreateFunctionsRequest
	(*GetOrCreateFunctionsResponse)(nil),   // 3: parca.metastore.v1alpha1.GetOrCreateFunctionsResponse
	(*GetOrCreateLocationsRequest)(nil),    // 4: parca.metastore.v1alpha1.GetOrCreateLocationsRequest
	(*GetOrCreateLocationsResponse)(nil),   // 5: parca.metastore.v1alpha1.GetOrCreateLocationsResponse
	(*GetOrCreateStacktracesRequest)(nil),  // 6: parca.metastore.v1alpha1.GetOrCreateStacktracesRequest
	(*GetOrCreateStacktracesResponse)(nil), // 7: parca.metastore.v1alpha1.GetOrCreateStacktracesResponse
	(*UnsymbolizedLocationsRequest)(nil),   // 8: parca.metastore.v1alpha1.UnsymbolizedLocationsRequest
	(*UnsymbolizedLocationsResponse)(nil),  // 9: parca.metastore.v1alpha1.UnsymbolizedLocationsResponse
	(*CreateLocationLinesRequest)(nil),     // 10: parca.metastore.v1alpha1.CreateLocationLinesRequest
	(*CreateLocationLinesResponse)(nil),    // 11: parca.metastore.v1alpha1.CreateLocationLinesResponse
	(*StacktracesRequest)(nil),             // 12: parca.metastore.v1alpha1.StacktracesRequest
	(*StacktracesResponse)(nil),            // 13: parca.metastore.v1alpha1.StacktracesResponse
	(*LocationsRequest)(nil),               // 14: parca.metastore.v1alpha1.LocationsRequest
	(*LocationsResponse)(nil),              // 15: parca.metastore.v1alpha1.LocationsResponse
	(*LocationLinesRequest)(nil),           // 16: parca.metastore.v1alpha1.LocationLinesRequest
	(*FunctionsRequest)(nil),               // 17: parca.metastore.v1alpha1.FunctionsRequest
	(*FunctionsResponse)(nil),              // 18: parca.metastore.v1alpha1.FunctionsResponse
	(*MappingsRequest)(nil),                // 19: parca.metastore.v1alpha1.MappingsRequest
	(*MappingsResponse)(nil),               // 20: parca.metastore.v1alpha1.MappingsResponse
	(*Sample)(nil),                         // 21: parca.metastore.v1alpha1.Sample
	(*Stacktrace)(nil),                     // 22: parca.metastore.v1alpha1.Stacktrace
	(*SampleLabel)(nil),                    // 23: parca.metastore.v1alpha1.SampleLabel
	(*SampleNumLabel)(nil),                 // 24: parca.metastore.v1alpha1.SampleNumLabel
	(*SampleNumUnit)(nil),                  // 25: parca.metastore.v1alpha1.SampleNumUnit
	(*Location)(nil),                       // 26: parca.metastore.v1alpha1.Location
	(*Line)(nil),                           // 27: parca.metastore.v1alpha1.Line
	(*Function)(nil),                       // 28: parca.metastore.v1alpha1.Function
	(*Mapping)(nil),                        // 29: parca.metastore.v1alpha1.Mapping
	nil,                                    // 30: parca.metastore.v1alpha1.Sample.LabelsEntry
	nil,                                    // 31: parca.metastore.v1alpha1.Sample.NumLabelsEntry
	nil,                                    // 32: parca.metastore.v1alpha1.Sample.NumUnitsEntry
}
var file_parca_metastore_v1alpha1_metastore_proto_depIdxs = []int32{
	29, // 0: parca.metastore.v1alpha1.GetOrCreateMappingsRequest.mappings:type_name -> parca.metastore.v1alpha1.Mapping
	29, // 1: parca.metastore.v1alpha1.GetOrCreateMappingsResponse.mappings:type_name -> parca.metastore.v1alpha1.Mapping
	28, // 2: parca.metastore.v1alpha1.GetOrCreateFunctionsRequest.functions:type_name -> parca.metastore.v1alpha1.Function
	28, // 3: parca.metastore.v1alpha1.GetOrCreateFunctionsResponse.functions:type_name -> parca.metastore.v1alpha1.Function
	26, // 4: parca.metastore.v1alpha1.GetOrCreateLocationsRequest.locations:type_name -> parca.metastore.v1alpha1.Location
	26, // 5: parca.metastore.v1alpha1.GetOrCreateLocationsResponse.locations:type_name -> parca.metastore.v1alpha1.Location
	22, // 6: parca.metastore.v1alpha1.GetOrCreateStacktracesRequest.stacktraces:type_name -> parca.metastore.v1alpha1.Stacktrace
	22, // 7: parca.metastore.v1alpha1.GetOrCreateStacktracesResponse.stacktraces:type_name -> parca.metastore.v1alpha1.Stacktrace
	26, // 8: parca.metastore.v1alpha1.UnsymbolizedLocationsResponse.locations:type_name -> parca.metastore.v1alpha1.Location
	26, // 9: parca.metastore.v1alpha1.CreateLocationLinesRequest.locations:type_name -> parca.metastore.v1alpha1.Location
	22, // 10: parca.metastore.v1alpha1.StacktracesResponse.stacktraces:type_name -> parca.metastore.v1alpha1.Stacktrace
	26, // 11: parca.metastore.v1alpha1.LocationsResponse.locations:type_name -> parca.metastore.v1alpha1.Location
	28, // 12: parca.metastore.v1alpha1.FunctionsResponse.functions:type_name -> parca.metastore.v1alpha1.Function
	29, // 13: parca.metastore.v1alpha1.MappingsResponse.mappings:type_name -> parca.metastore.v1alpha1.Mapping
	30, // 14: parca.metastore.v1alpha1.Sample.labels:type_name -> parca.metastore.v1alpha1.Sample.LabelsEntry
	31, // 15: parca.metastore.v1alpha1.Sample.num_labels:type_name -> parca.metastore.v1alpha1.Sample.NumLabelsEntry
	32, // 16: parca.metastore.v1alpha1.Sample.num_units:type_name -> parca.metastore.v1alpha1.Sample.NumUnitsEntry
	27, // 17: parca.metastore.v1alpha1.Location.lines:type_name -> parca.metastore.v1alpha1.Line
	23, // 18: parca.metastore.v1alpha1.Sample.LabelsEntry.value:type_name -> parca.metastore.v1alpha1.SampleLabel
	24, // 19: parca.metastore.v1alpha1.Sample.NumLabelsEntry.value:type_name -> parca.metastore.v1alpha1.SampleNumLabel
	25, // 20: parca.metastore.v1alpha1.Sample.NumUnitsEntry.value:type_name -> parca.metastore.v1alpha1.SampleNumUnit
	0,  // 21: parca.metastore.v1alpha1.MetastoreService.GetOrCreateMappings:input_type -> parca.metastore.v1alpha1.GetOrCreateMappingsRequest
	2,  // 22: parca.metastore.v1alpha1.MetastoreService.GetOrCreateFunctions:input_type -> parca.metastore.v1alpha1.GetOrCreateFunctionsRequest
	4,  // 23: parca.metastore.v1alpha1.MetastoreService.GetOrCreateLocations:input_type -> parca.metastore.v1alpha1.GetOrCreateLocationsRequest
	6,  // 24: parca.metastore.v1alpha1.MetastoreService.GetOrCreateStacktraces:input_type -> parca.metastore.v1alpha1.GetOrCreateStacktracesRequest
	8,  // 25: parca.metastore.v1alpha1.MetastoreService.UnsymbolizedLocations:input_type -> parca.metastore.v1alpha1.UnsymbolizedLocationsRequest
	10, // 26: parca.metastore.v1alpha1.MetastoreService.CreateLocationLines:input_type -> parca.metastore.v1alpha1.CreateLocationLinesRequest
	14, // 27: parca.metastore.v1alpha1.MetastoreService.Locations:input_type -> parca.metastore.v1alpha1.LocationsRequest
	17, // 28: parca.metastore.v1alpha1.MetastoreService.Functions:input_type -> parca.metastore.v1alpha1.FunctionsRequest
	19, // 29: parca.metastore.v1alpha1.MetastoreService.Mappings:input_type -> parca.metastore.v1alpha1.MappingsRequest
	12, // 30: parca.metastore.v1alpha1.MetastoreService.Stacktraces:input_type -> parca.metastore.v1alpha1.StacktracesRequest
	1,  // 31: parca.metastore.v1alpha1.MetastoreService.GetOrCreateMappings:output_type -> parca.metastore.v1alpha1.GetOrCreateMappingsResponse
	3,  // 32: parca.metastore.v1alpha1.MetastoreService.GetOrCreateFunctions:output_type -> parca.metastore.v1alpha1.GetOrCreateFunctionsResponse
	5,  // 33: parca.metastore.v1alpha1.MetastoreService.GetOrCreateLocations:output_type -> parca.metastore.v1alpha1.GetOrCreateLocationsResponse
	7,  // 34: parca.metastore.v1alpha1.MetastoreService.GetOrCreateStacktraces:output_type -> parca.metastore.v1alpha1.GetOrCreateStacktracesResponse
	9,  // 35: parca.metastore.v1alpha1.MetastoreService.UnsymbolizedLocations:output_type -> parca.metastore.v1alpha1.UnsymbolizedLocationsResponse
	11, // 36: parca.metastore.v1alpha1.MetastoreService.CreateLocationLines:output_type -> parca.metastore.v1alpha1.CreateLocationLinesResponse
	15, // 37: parca.metastore.v1alpha1.MetastoreService.Locations:output_type -> parca.metastore.v1alpha1.LocationsResponse
	18, // 38: parca.metastore.v1alpha1.MetastoreService.Functions:output_type -> parca.metastore.v1alpha1.FunctionsResponse
	20, // 39: parca.metastore.v1alpha1.MetastoreService.Mappings:output_type -> parca.metastore.v1alpha1.MappingsResponse
	13, // 40: parca.metastore.v1alpha1.MetastoreService.Stacktraces:output_type -> parca.metastore.v1alpha1.StacktracesResponse
	31, // [31:41] is the sub-list for method output_type
	21, // [21:31] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_parca_metastore_v1alpha1_metastore_proto_init() }
func file_parca_metastore_v1alpha1_metastore_proto_init() {
	if File_parca_metastore_v1alpha1_metastore_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_parca_metastore_v1alpha1_metastore_proto_rawDesc), len(file_parca_metastore_v1alpha1_metastore_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_parca_metastore_v1alpha1_metastore_proto_goTypes,
		DependencyIndexes: file_parca_metastore_v1alpha1_metastore_proto_depIdxs,
		MessageInfos:      file_parca_metastore_v1alpha1_metastore_proto_msgTypes,
	}.Build()
	File_parca_metastore_v1alpha1_metastore_proto = out.File
	file_parca_metastore_v1alpha1_metastore_proto_goTypes = nil
	file_parca_metastore_v1alpha1_metastore_proto_depIdxs = nil
}
